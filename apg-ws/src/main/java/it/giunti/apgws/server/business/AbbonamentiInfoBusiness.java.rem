package it.giunti.apgws.server.business;

import it.giunti.apgws.server.WsConstants;
import it.giunti.apgws.server.persistence.FascicoliDao;
import it.giunti.apgws.shared.AppConstants;
import it.giunti.apgws.shared.BusinessException;
import it.giunti.apgws.shared.model.Anagrafiche;
import it.giunti.apgws.shared.model.Fascicoli;
import it.giunti.apgws.shared.model.Indirizzi;
import it.giunti.apgws.shared.model.IstanzeAbbonamenti;
import it.giunti.apgws.shared.model.OpzioniIstanzeAbbonamenti;
import it.giunti.servizi.abbonamentiinfows.DatiAbbonamento;

import java.util.Date;
import java.util.Set;

import javax.xml.datatype.XMLGregorianCalendar;

import org.hibernate.Session;

public class AbbonamentiInfoBusiness {
	
	//private static final Logger LOG = LoggerFactory.getLogger(AbbonamentiInfoBusiness.class);
	
	//public static AbbonamentiInfoUpdateResultBean updateAbbonamentiInfo()
	//		throws FileTransferException, FileParserException, DaoException {
	//	//Acquire the file
	//	FtpFileTransfer ftpAix = new FtpFileTransfer(
	//			WsConstants.FTP_HOST,
	//			WsConstants.FTP_DIR,
	//			WsConstants.FTP_USER_NAME,
	//			WsConstants.FTP_PASSWORD);
	//	File f = ftpAix.downloadFile(WsConstants.FTP_FILE_NAME);
	//	//Parse the file
	//	List<AbbonamentiInfo> abboList = AbbonamentiFileParser.parseFlatFile(f);
	//	//Save the parsed content
	//	GenericDao baseDao = new GenericDao();
	//	Session ses = baseDao.getSession();
	//	Transaction trn = ses.beginTransaction();
	//	
	//	AbbonamentiInfoUpdateResultBean report = new AbbonamentiInfoUpdateResultBean();
	//	try {
	//		Integer saved = AbbonamentiInfoDao.massiveOverwrite(ses, abboList);
	//		report.setSaved(saved);
	//		//Calculate the date to consider content expired
	//		Calendar cal = new GregorianCalendar();
	//		cal.add(Calendar.DAY_OF_MONTH, (-1)*WsConstants.DAYS_TO_DELETE_CONTENT);
	//		Date expiryDate = cal.getTime();
	//		//Delete expired data
	//		Integer deleted = AbbonamentiInfoDao.deleteModifiedBefore(ses, expiryDate);
	//		report.setDeleted(deleted);
	//		trn.commit();
	//	} catch (DaoException e) {
	//		trn.rollback();
	//		throw new DaoException(e.getMessage(), e);
	//	} finally {
	//		ses.close();
	//	}
	//	return report;
	//}
	
	public static DatiAbbonamento convertEntityToWs(Session ses, IstanzeAbbonamenti ia)
			throws BusinessException {
		DatiAbbonamento result = null;
		if (ia != null) {
			result = new DatiAbbonamento();
			result.setCodice(ia.getAbbonamento().getCodiceAbbonamento());
			String idRivista = result.getCodice().substring(0,1);
			Anagrafiche abbonato = ia.getAbbonato();
			String cognomeNome = "";
			if (abbonato.getCognomeRagioneSociale() != null)
				cognomeNome += abbonato.getCognomeRagioneSociale();
			if (abbonato.getNome() != null)
				cognomeNome += " " +abbonato.getNome();
			result.setCognomeNome(cognomeNome);
			Indirizzi ind = abbonato.getIndirizzoPrincipale();
			result.setPresso(ind.getPresso());
			result.setIndirizzo(ind.getIndirizzo());
			String cap = ind.getCap();
			if (cap == null) cap = "";
			result.setCap(cap);
			result.setLocalita(ind.getLocalita());
			String idProv = ind.getProvincia();
			if (idProv == null) idProv = "";
			result.setProv(idProv);
			result.setCopie(ia.getCopie());
			result.setBuonoAcquisto(WsConstants.BUONO_ACQUISTO_DEFAULT);
			boolean areaExtra = hasAreaExtra(ia);
			result.setAreaExtra(areaExtra);
			result.setIdRivista(idRivista);
			result.setEmail(abbonato.getEmailPrimaria());
			boolean attivo = isAttivo(ses, ia);
			result.setAttivo(attivo);
			XMLGregorianCalendar xmlDate = CommonBusiness.dateToXmlDate(ia.getDataModifica());
			result.setUltimoAggiornamento(xmlDate);
		}
		return result;
	}
	
	private static boolean isAttivo(Session ses, IstanzeAbbonamenti ia) throws BusinessException {
		boolean attivo = false;
		Date today = new Date();
		FascicoliDao dao = new FascicoliDao();
		boolean inRegola = IstanzeAbbonamentiBusiness.isInRegola(ia);
		Date fineUltimoGracing = null;
		if (inRegola) {
			//Se è pagato la validità finisce con l'ultimo gracing
			Fascicoli ultimoGracing = dao.findFascicoliAfterFascicolo(ses,
					ia.getFascicoloFine(),
					ia.getListino().getGracingFinale());
			if (ultimoGracing == null) ultimoGracing = ia.getFascicoloFine();
			fineUltimoGracing = ultimoGracing.getDataNominaleFine();
		} else {
			//Se non è pagato la validità è limitata al gracing iniziale
			if (ia.getListino().getGracingIniziale() > 0) {
				Fascicoli gracingIniziale = dao.findFascicoliAfterFascicolo(ses,
						ia.getFascicoloInizio(),
						ia.getListino().getGracingIniziale());
				fineUltimoGracing = gracingIniziale.getDataNominaleFine();
			} else {
				//se non c'è gracing iniziale la validità termina subito, con l'uscita del 1° numero
				fineUltimoGracing = ia.getFascicoloInizio().getDataNominale();
			}
		}
		if (fineUltimoGracing.after(today)) {
			attivo = true;
		}
		return attivo;
	}

	private static boolean hasAreaExtra(IstanzeAbbonamenti ia) {
		boolean result = WsConstants.AREA_EXTRA_DEFAULT;
		Set<OpzioniIstanzeAbbonamenti> opzSet = ia.getOpzioniIstanzeAbbonamentiSet();
		if (opzSet != null) {
			if (opzSet.size() > 0) {
				for (OpzioniIstanzeAbbonamenti opz:opzSet) {
					if (opz.getOpzione().getTag() != null) {
						if (opz.getOpzione().getTag().contains(AppConstants.TAG_AREAEXTRA)) {
							result = true;
						}
					}
				}
			}
		}
		return result;
	}
	
}
