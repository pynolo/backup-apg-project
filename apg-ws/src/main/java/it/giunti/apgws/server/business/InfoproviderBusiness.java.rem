package it.giunti.apgws.server.business;

import it.giunti.apgws.server.infoprovider.Abbonamento;
import it.giunti.apgws.server.infoprovider.Anagrafica;
import it.giunti.apgws.server.infoprovider.Fascicolo;
import it.giunti.apgws.server.infoprovider.Supplemento;
import it.giunti.apgws.server.persistence.PagamentiDao;
import it.giunti.apgws.shared.model.Abbonamenti;
import it.giunti.apgws.shared.model.Anagrafiche;
import it.giunti.apgws.shared.model.Fascicoli;
import it.giunti.apgws.shared.model.Indirizzi;
import it.giunti.apgws.shared.model.IstanzeAbbonamenti;
import it.giunti.apgws.shared.model.Opzioni;
import it.giunti.apgws.shared.model.OpzioniIstanzeAbbonamenti;
import it.giunti.apgws.shared.model.Pagamenti;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;

public class InfoproviderBusiness {

	public static Abbonamento convertIstanza(Session ses, IstanzeAbbonamenti ia, List<Pagamenti> pagamenti)
			throws HibernateException {
		Abbonamenti abbo = ia.getAbbonamento();
		Abbonamento abboWs = new Abbonamento();
		//Conversione abbonamento
		abboWs.setCodiceAbbonamento(ia.getAbbonamento().getCodiceAbbonamento());
		abboWs.setPeriodicoLettera(ia.getAbbonamento().getPeriodico().getLettera());
		abboWs.setPeriodicoDescr(ia.getAbbonamento().getPeriodico().getNome());
		abboWs.setDataCreazioneAbbonamento(
				CommonBusiness.dateToXmlDate(abbo.getDataCreazione()));
		abboWs.setDataCreazioneIstanza(
				CommonBusiness.dateToXmlDate(ia.getDataCreazione()));
		abboWs.setAdesione(ia.getAdesione().getCodice());
		abboWs.setFascicoliTotali(ia.getFascicoliTotali()+"");
	    if (ia.getListino().getCartaceo()) abboWs.setFascicoliSpediti(ia.getFascicoliSpediti()+"");
	    abboWs.setCopie(ia.getCopie());
	    if (ia.getDataDisdetta() != null) abboWs.setDataDisdetta(
				CommonBusiness.dateToXmlDate(ia.getDataDisdetta()));
	    if (ia.getInvioBloccato()) abboWs.setInvioBloccato(ia.getInvioBloccato());
	    abboWs.setCartaceo(ia.getListino().getCartaceo());
	    abboWs.setDigitale(ia.getListino().getDigitale());
	    abboWs.setTipoAbbonamentoCodice(ia.getListino().getTipoAbbonamento().getCodice());
	    abboWs.setTipoAbbonamentoDescr(ia.getListino().getTipoAbbonamento().getNome());
	    abboWs.setTipoAbbonamentoImporto(ia.getListino().getPrezzo());
	    abboWs.setPagato(ia.getPagato());
	    Double totalePagato = 0D;
	    if (pagamenti != null) {
		    for (Pagamenti pag:pagamenti) {
				totalePagato += pag.getImporto();
			}
	    }
	    if (totalePagato > 0) abboWs.setTotalePagato(totalePagato);
	    if (ia.getInFatturazione()) {
	    	abboWs.setInFatturazione(ia.getInFatturazione());
	    	if (ia.getFatturaData() != null) abboWs.setFatturaData(
	    			CommonBusiness.dateToXmlDate(ia.getFatturaData()));
	    	abboWs.setFatturaNumero(ia.getFatturaNumero());
	    	abboWs.setFatturaImporto(ia.getFatturaImporto());
	    }
		if (ia.getDataModifica() != null) abboWs.setDataModifica(
				CommonBusiness.dateToXmlDate(ia.getDataModifica()));
		
		//Fascicoli incapsulati
		Fascicolo fasInizio = convertFascicolo(ia.getFascicoloInizio());
		abboWs.setFascicoloInizio(fasInizio);
		Fascicolo fasFine = convertFascicolo(ia.getFascicoloFine());
		abboWs.setFascicoloFine(fasFine);
		//Supplementi incapsulati
		List<Supplemento> suppWsList = abboWs.getSupplemento();//JAXB deve istanziare la list
		if (ia.getOpzioniIstanzeAbbonamentiSet() != null) {
			for (OpzioniIstanzeAbbonamenti opz:ia.getOpzioniIstanzeAbbonamentiSet()) {
				Supplemento suppWs = convertOpzione(opz.getOpzione());
				suppWsList.add(suppWs);
			}
		}
		//Anagrafiche incapsulate
		Anagrafica anagAbbonato = convertAnagrafica(ses, ia.getAbbonato());
		abboWs.setAbbonato(anagAbbonato);
		Anagrafica anagPagante = convertAnagrafica(ses, ia.getPagante());
		abboWs.setPagante(anagPagante);
		Anagrafica anagPromotore = convertAnagrafica(ses, ia.getPromotore());
		abboWs.setPromotore(anagPromotore);
		return abboWs;
	}
	
	public static Anagrafica convertAnagrafica(Session ses, Anagrafiche anag) throws HibernateException {
		if (anag == null) return null;
		Indirizzi indAnag = anag.getIndirizzoPrincipale();
		Anagrafica anagWs = new Anagrafica();
		anagWs.setCodiceCliente(anag.getCodiceCliente());
		anagWs.setCognomeRagioneSociale(anag.getCognomeRagioneSociale());
		anagWs.setNome(anag.getNome());
		anagWs.setPresso(indAnag.getPresso());
		anagWs.setIndirizzo(indAnag.getIndirizzo());
		anagWs.setCap(indAnag.getCap());
		anagWs.setLocalita(indAnag.getLocalita());
		anagWs.setProvincia(indAnag.getProvincia());
		anagWs.setEmail(anag.getEmailPrimaria());
		double creditoTotale = 0D;
		List<Pagamenti> creditiList = new PagamentiDao().findCreditiByAnagrafica(ses, anag);
		for (Pagamenti p:creditiList) {
			creditoTotale += p.getImporto();
		}
		if (creditoTotale > 0.1) anagWs.setCredito(creditoTotale);
		if (indAnag.getNazione() != null) anagWs.setNazione(indAnag.getNazione().getNomeNazione());
		return anagWs;
	}
	
	public static Supplemento convertOpzione(Opzioni opz) {
		if (opz == null) return null;
		Supplemento suppWs = new Supplemento();
		suppWs.setCodiceSupplemento(opz.getTag());
		suppWs.setNome(opz.getNome());
		suppWs.setPrezzo(opz.getPrezzo());
		if (opz.getDataInizio() != null) suppWs.setDataInizio(
				CommonBusiness.dateToXmlDate(opz.getDataInizio()));
		if (opz.getDataFine() != null) suppWs.setDataFine(
				CommonBusiness.dateToXmlDate(opz.getDataFine()));
		suppWs.setCartaceo(opz.getCartaceo());
		suppWs.setDigitale(opz.getDigitale());
		return suppWs;
	}
	
	public static Fascicolo convertFascicolo(Fascicoli fas) {
		if (fas == null) return null;
		Fascicolo fasWs = new Fascicolo();
		fasWs.setNumeroFascicolo(fas.getNumeroFascicolo());
		fasWs.setDataCopertina(fas.getDataCop());
		fasWs.setDataNominale(
				CommonBusiness.dateToXmlDate(fas.getDataNominale()));
		fasWs.setDataNominaleFine(
				CommonBusiness.dateToXmlDate(fas.getDataNominaleFine()));
		fasWs.setDataPubblicazione(
				CommonBusiness.dateToXmlDate(fas.getDataPubblicazione()));
		return fasWs;
	}
}
