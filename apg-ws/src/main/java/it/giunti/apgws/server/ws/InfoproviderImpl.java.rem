package it.giunti.apgws.server.ws;

import it.giunti.apgws.server.ServerConstants;
import it.giunti.apgws.server.WsConstants;
import it.giunti.apgws.server.business.InfoproviderBusiness;
import it.giunti.apgws.server.business.WsLogBusiness;
import it.giunti.apgws.server.infoprovider.Abbonamento;
import it.giunti.apgws.server.infoprovider.AbbonamentoFindParams;
import it.giunti.apgws.server.infoprovider.AbbonamentoFindResult;
import it.giunti.apgws.server.infoprovider.Anagrafica;
import it.giunti.apgws.server.infoprovider.AnagraficaFindParams;
import it.giunti.apgws.server.infoprovider.AnagraficaFindResult;
import it.giunti.apgws.server.infoprovider.Infoprovider;
import it.giunti.apgws.server.persistence.AnagraficheDao;
import it.giunti.apgws.server.persistence.IstanzeAbbonamentiDao;
import it.giunti.apgws.server.persistence.PagamentiDao;
import it.giunti.apgws.server.persistence.SessionFactory;
import it.giunti.apgws.shared.BusinessException;
import it.giunti.apgws.shared.model.Anagrafiche;
import it.giunti.apgws.shared.model.IstanzeAbbonamenti;
import it.giunti.apgws.shared.model.Pagamenti;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.jws.WebService;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Session;

@WebService(serviceName = "infoprovider", portName = "infoproviderSOAP",
		endpointInterface = "it.giunti.apgws.server.infoprovider.Infoprovider",
		targetNamespace = "http://applicazioni.giunti.it/apgws/infoprovider",
		wsdlLocation = "WEB-INF/wsdl/infoprovider.wsdl")
public class InfoproviderImpl implements Infoprovider {

	private static final Logger LOG = LoggerFactory.getLogger(InfoproviderImpl.class);
	
	@Override
	public AbbonamentoFindResult abbonamentifind(
			AbbonamentoFindParams parameters) {
		String codiceAbbonamento = parameters.getCodiceAbbonamento();
		XMLGregorianCalendar dateParam = parameters.getDataControllo();
		Date dataControllo = null;
		if (dateParam != null) dataControllo = dateParam.toGregorianCalendar().getTime();
		AbbonamentoFindResult result = new AbbonamentoFindResult();
		Abbonamento abboResult = null;
		//Parameter validation
		boolean validParameters = true;
		if (codiceAbbonamento == null) codiceAbbonamento = "";
		if ( (codiceAbbonamento.length() == 0) || (dataControllo == null) ) {
			result.setErrorCode(WsConstants.WS_ERR_PARAMETER);
			result.setErrorDesc(WsConstants.WS_ERR_PARAMETER_DESC);
			validParameters = false;
		}
		//Esegue la ricerca
		if (validParameters) {
			Session ses = SessionFactory.getSession();
			try {
				IstanzeAbbonamenti ia = new IstanzeAbbonamentiDao().findIstanzaByCodiceData(ses, codiceAbbonamento, dataControllo);
				if (ia != null) {
					List<Pagamenti> pagList = new PagamentiDao().findPagamentiByIstanzaAbbonamento(ses, ia.getId());
					abboResult = InfoproviderBusiness.convertIstanza(ses, ia, pagList);
				}
			} catch (HibernateException e) {
				LOG.error(e.getMessage(), e);
				result.setErrorCode(WsConstants.WS_ERR_SYSTEM);
				result.setErrorDesc(WsConstants.WS_ERR_SYSTEM_DESC);
			} finally {
				ses.close();
			}
			if (abboResult == null) {
				result.setErrorCode(WsConstants.WS_ERR_NOT_FOUND);
				result.setErrorDesc(WsConstants.WS_ERR_NOT_FOUND_DESC);
			} else {
				result.setAbbonamento(abboResult);
			}
		}
		//LOG_WS
		try {
			String params = "codiceAbbonamento="+codiceAbbonamento+WsConstants.SERVICE_SEPARATOR+
					"dataControllo="+ServerConstants.FORMAT_DAY.format(dataControllo);
			String resString = WsConstants.SERVICE_OK;
			if (result.getErrorCode() != null) {
				if (result.getErrorDesc() != null) {
					resString = result.getErrorDesc();
				} else {
					resString = "error "+result.getErrorCode();
				}
			}
			WsLogBusiness.writeWsLog(WsConstants.SERVICE_INFOPROVIDER,
					"abbonamentifind", params, resString);
		} catch (BusinessException e) {
			LOG.error(e);
		}
		
		return result;
	}

	@Override
	public AnagraficaFindResult anagraficafind(AnagraficaFindParams parameters) {
		AnagraficaFindResult result = new AnagraficaFindResult();
		//Acquisizione parametri
		String codiceCliente = parameters.getCodiceCliente();
		if (codiceCliente == null) codiceCliente = "";
		String codiceAbbonamento = parameters.getCodiceAbbonamento();
		if (codiceAbbonamento == null) codiceAbbonamento = "";
		XMLGregorianCalendar dateParam = parameters.getDataControllo();
		Date dataControllo = new Date();
		if (dateParam != null) dataControllo = dateParam.toGregorianCalendar().getTime();
		//Parameter validation
		boolean validParameters = true;
		if ( (codiceAbbonamento.length() == 0 && codiceCliente.length() == 0 ) || (dataControllo == null) ) {
			result.setErrorCode(WsConstants.WS_ERR_PARAMETER);
			result.setErrorDesc(WsConstants.WS_ERR_PARAMETER_DESC);
			validParameters = false;
		}
		
		//Estrazione
		if (validParameters) {
			Anagrafica anaResult = null;
			List<String> codiciAbbonamentoList = new ArrayList<String>();
			List<String> codiciAbbonamentoRegaloList = new ArrayList<String>();
			List<String> codiciAbbonamentoPromossiList = new ArrayList<String>();
			Session ses = SessionFactory.getSession();
			try {
				Anagrafiche ana = null;
				//Ricerca anagrafica per Codice Abbonamento
				if (codiceAbbonamento.length() > 0) {
					IstanzeAbbonamenti ia = new IstanzeAbbonamentiDao().findUltimaIstanzaByCodice(ses, codiceAbbonamento);
					if (ia != null) {
						ana = ia.getAbbonato();
					}
				}
				//Ricerca anagrafica per Codice Cliente
				if (codiceCliente.length() > 0) {
					List<Anagrafiche> anaList = new AnagraficheDao().findByProperties(ses, codiceCliente,
							null, null, null, null, null, null, null, null,
							null, null, 0, Integer.MAX_VALUE);
					if (anaList != null) {
						if (anaList.size() > 0) {
							ana = anaList.get(0);
						}
					}
				}
				//Se ha trovato qualcosa, estrae gli abbonamenti
				if (ana != null) {
					anaResult = InfoproviderBusiness.convertAnagrafica(ses, ana);
					//Trovata l'anagrafica la assegna e estrae i codici abbonamenti esistenti alla data
					//ABBONAMENTI
					List<IstanzeAbbonamenti> iaList = new IstanzeAbbonamentiDao().
							findIstanzeProprieByAnagraficaDate(ses, ana.getId(), dataControllo,
									0, Integer.MAX_VALUE);
					for (IstanzeAbbonamenti ia:iaList) {
						codiciAbbonamentoList.add(ia.getAbbonamento().getCodiceAbbonamento());
					}
					//ABBONAMENTI REGALO
					List<IstanzeAbbonamenti> iaRegaloList = new IstanzeAbbonamentiDao().
							findIstanzeRegalateByAnagraficaDate(ses, ana.getId(), dataControllo,
									0, Integer.MAX_VALUE);
					for (IstanzeAbbonamenti ia:iaRegaloList) {
						codiciAbbonamentoRegaloList.add(ia.getAbbonamento().getCodiceAbbonamento());
					}
					//ABBONAMENTI PROMOSSI
					List<IstanzeAbbonamenti> iaPromList = new IstanzeAbbonamentiDao().
							findIstanzePromosseByAnagraficaDate(ses, ana.getId(), dataControllo,
									0, Integer.MAX_VALUE);
					for (IstanzeAbbonamenti ia:iaPromList) {
						codiciAbbonamentoPromossiList.add(ia.getAbbonamento().getCodiceAbbonamento());
					}
				}
			} catch (HibernateException e) {
				LOG.error(e.getMessage(), e);
				result.setErrorCode(WsConstants.WS_ERR_SYSTEM);
				result.setErrorDesc(WsConstants.WS_ERR_SYSTEM_DESC);
			} finally {
				ses.close();
			}
			if (anaResult == null) {
				result.setErrorCode(WsConstants.WS_ERR_NOT_FOUND);
				result.setErrorDesc(WsConstants.WS_ERR_NOT_FOUND_DESC);
			} else {
				//Se non ci sono errori assegna anagrafica ed elenco codici abbonamento
				result.setAnagrafica(anaResult);
				List<String> codAbboList = result.getCodiceAbbonamento();
				codAbboList.addAll(codiciAbbonamentoList);
				List<String> codAbboRegaloList = result.getCodiceAbbonamentoRegalo();
				codAbboRegaloList.addAll(codiciAbbonamentoRegaloList);
				List<String> codAbboPromossoList = result.getCodiceAbbonamentoPromosso();
				codAbboPromossoList.addAll(codiciAbbonamentoPromossiList);
			}
		}
		//LOG_WS
		try {
			String params = "";
			if (codiceCliente != null) {
				params += "codiceCliente="+codiceCliente+WsConstants.SERVICE_SEPARATOR;
			}
			if (codiceAbbonamento != null) {
				params += "codiceAbbonamento="+codiceAbbonamento+WsConstants.SERVICE_SEPARATOR;
			}
			params += "dataControllo="+ServerConstants.FORMAT_DAY.format(dataControllo);
			String resString = WsConstants.SERVICE_OK;
			if (result.getErrorCode() != null) {
				resString = result.getErrorDesc();
			}
			WsLogBusiness.writeWsLog(WsConstants.SERVICE_INFOPROVIDER,
					"anagraficafind", params, resString);
		} catch (BusinessException e) {
			LOG.error(e);
		}
		
		return result;
	}

}

