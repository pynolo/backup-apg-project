package it.giunti.apg.updater;

import it.giunti.apg.server.persistence.GenericDao;
import it.giunti.apg.server.persistence.SessionFactory;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.model.Adesioni;
import it.giunti.apg.shared.model.IstanzeAbbonamenti;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.type.StringType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MoveAdesioniToTable {
	
	private static final Logger LOG = LoggerFactory.getLogger(MoveAdesioniToTable.class);

	private static Map<String, String> conversionMap = new HashMap<String, String>();
	private static Map<String, Adesioni> adeMap = new HashMap<String, Adesioni>();
	private static List<String> discardedList = new ArrayList<String>();
	
	public static void importFile(String csvFilePath) 
			throws FileNotFoundException, BusinessException, IOException {
		File csvFile = new File(csvFilePath);
		FileInputStream fstream = new FileInputStream(csvFile);
		BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
		Session ses = SessionFactory.getSession();
		Transaction trn = ses.beginTransaction();
		try {
			LOG.info("Eliminzione vecchie adesioni");
			//Elimino vecchie adesioni
			String truncateSql = "truncate adesioni";
			Query truncateQ = ses.createSQLQuery(truncateSql);
			int delCount = truncateQ.executeUpdate();
			LOG.info("Eliminate "+delCount+" adesioni da DB");
			
			System.out.print("\r\n");
			String line = br.readLine();
			//Tabella di conversione
			while (line != null) {
				String items[] = line.split(";");
				if (items.length > 2) {
					String oldAdeString = items[0].toUpperCase();
					String newAdeString = items[2].toUpperCase();
					conversionMap.put(oldAdeString, newAdeString);
					//Creazione adesione se non esiste
					if (adeMap.get(newAdeString) == null) {
						//La nuova adesione ancora non esiste
						Adesioni ade = createAdesione(ses, newAdeString);
						adeMap.put(newAdeString, ade);
					}
				}
				line = br.readLine();
			}
			LOG.info("Create "+adeMap.size()+" nuove adesioni su cui convoglieranno "+conversionMap.size()+" adesioni vecchie");
			encodeAdesioniAbbonamenti(ses);
			trn.commit();
		} catch (HibernateException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} catch (FileNotFoundException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} catch (IOException e) {
			trn.rollback();
			throw new IOException(e.getMessage(), e);
		} finally {
			ses.close();
			br.close();
			fstream.close();
		}
	}
	
	private static Adesioni createAdesione(Session ses, String adesioneString) {
		Adesioni adesione = adeMap.get(adesioneString);
		if (adesione == null) {
			String adeHql = "from Adesioni a where "+
					"a.codice = :s1";
			Query q = ses.createQuery(adeHql);
			q.setParameter("s1", adesioneString, StringType.INSTANCE);
			q.setMaxResults(1);
			@SuppressWarnings("unchecked")
			List<Adesioni> list = (List<Adesioni>) q.list();
			if (list != null) {
				if (list.size() > 0) {
					adesione = list.get(0);
				}
			}
			if (adesione == null) {
				adesione = new Adesioni();
				adesione.setCodice(adesioneString);
				adesione.setDataModifica(new Date());
				adesione.setDescr(adesioneString);
				GenericDao.saveGeneric(ses, adesione);
			}
		}
		return adesione;
	}
	
	@SuppressWarnings("unchecked")
	private static void encodeAdesioniAbbonamenti(Session ses) {
		List<IstanzeAbbonamenti> list= null;
		int offset = 0;
		do {
			String adeHql = "from IstanzeAbbonamenti ia where "+
					"(ia.adesioneTxt is not null or ia.adesioneTxt != :s1)";
			Query q = ses.createQuery(adeHql);
			q.setParameter("s1", "", StringType.INSTANCE);
			q.setMaxResults(500);
			q.setFirstResult(offset);
			list = (List<IstanzeAbbonamenti>) q.list();
			for (IstanzeAbbonamenti ia:list) {
				String oldAdesione = "";
				if (ia.getAdesioneTxt() != null) oldAdesione = ia.getAdesioneTxt().toUpperCase();
				String newAdesione = conversionMap.get(oldAdesione);
				Adesioni adesione = adeMap.get(newAdesione);
				ia.setAdesione(adesione);
				String note = ia.getNote();
				if (note == null) note = "";
				if (note.startsWith("null")) note = note.substring(4);
				if (note.contains(" adesione:")) note = note.substring(
						0, note.indexOf(" adesione:"));
				if (oldAdesione != null) {
					if (oldAdesione.length() > 0) {
						ia.setNote(note+" adesione:"+ia.getAdesioneTxt());
						if (adesione == null) {
							if (!discardedList.contains(oldAdesione)) {
								LOG.info("Adesione scartata: "+ia.getAdesioneTxt());
								discardedList.add(oldAdesione);
							}
						}
					}
				}
				GenericDao.updateGeneric(ses, ia.getId(), ia);
			}
			offset += list.size();
			LOG.info("Modificate "+offset+" istanze");
			ses.flush();
			ses.clear();
		} while (list.size() > 0);
	}
	
}
