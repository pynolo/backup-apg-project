package it.giunti.apg.automation.jobs;

import it.giunti.apg.core.persistence.PagamentiDao;
import it.giunti.apg.core.persistence.PeriodiciDao;
import it.giunti.apg.core.persistence.SessionFactory;
import it.giunti.apg.shared.AppConstants;
import it.giunti.apg.shared.model.Pagamenti;
import it.giunti.apg.shared.model.Periodici;

import java.util.Date;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CheckCreditiJob implements Job {
	
	static private Logger LOG = LoggerFactory.getLogger(CheckCreditiJob.class);

	@Override
	public void execute(JobExecutionContext jobCtx) throws JobExecutionException {
		String jobName = jobCtx.getJobDetail().getKey().getName();
		LOG.info("Started job '"+jobName+"'");
		Session ses = SessionFactory.getSession();
		Transaction trx = ses.beginTransaction();
		int totale = 0;
		try {
			totale = checkPagamenti(ses);
			trx.commit();
			LOG.info("Sono stati recuperati i crediti residui per "+totale+" abbonamenti");
		} catch (Exception e) {
			LOG.info("ERROR in job '"+jobName+"'");
			trx.rollback();
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e.getMessage(), e);
		} finally {
			ses.close();
		}
		LOG.info("Ended job '"+jobName+"'");
	}
	
	private int checkPagamenti(Session ses) throws HibernateException {
		PeriodiciDao perDao = new PeriodiciDao();
		PagamentiDao pagDao = new PagamentiDao();
		Date today = new Date();
		int count = 0;
		List<Periodici> perList = perDao.findByDate(ses, today);
		for (Periodici per:perList) {
			//Cerca i crediti residui per clienti che hanno debiti
			List<Pagamenti> credList = pagDao.findCreditiAbbonamentiDaPagare(ses, per.getId(), today);
			//Marca i crediti come errati
			for (Pagamenti cred:credList) {
				cred.setIdErrore(AppConstants.PAGAMENTO_ERR_CREDITO_RESIDUO);
				cred.setDataModifica(today);
				pagDao.updateNoLog(ses, cred);
				count++;
			}
		}
		return count;
	}
	
}
