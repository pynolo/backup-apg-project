package it.giunti.apg.automation.servlet;

import it.giunti.apg.core.business.FattureBusiness;
import it.giunti.apg.core.business.PagamentiMatchBusiness;
import it.giunti.apg.core.persistence.ContatoriDao;
import it.giunti.apg.core.persistence.FattureArticoliDao;
import it.giunti.apg.core.persistence.FattureDao;
import it.giunti.apg.core.persistence.FattureStampeDao;
import it.giunti.apg.core.persistence.PagamentiCreditiDao;
import it.giunti.apg.core.persistence.SessionFactory;
import it.giunti.apg.shared.AppConstants;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.model.Fatture;
import it.giunti.apg.shared.model.FattureArticoli;
import it.giunti.apg.shared.model.FattureStampe;
import it.giunti.apg.shared.model.PagamentiCrediti;
import it.giunti.apg.automation.business.FatturePdfBusiness;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRException;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class CreateRimborsoServlet extends HttpServlet {
	private static final long serialVersionUID = 1511013314228660853L;

	//private PagamentiDao pagDao = new PagamentiDao();
	private PagamentiCreditiDao credDao = new PagamentiCreditiDao();
	
	//Process the HTTP Get request
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException {
		//param: numeroFattura
		String numeroFattura = request.getParameter(AppConstants.PARAM_NAME);
		if (numeroFattura == null) throw new ServletException("No name=numeroFattura supplied");
		if (numeroFattura.equals("")) throw new ServletException("No name=numeroFattura supplied");
		numeroFattura = numeroFattura.toUpperCase();
		//param: action
		String action = request.getParameter("action");
		boolean isRimborsoTotale = action.equals("rimborsoTotale");
		boolean isStornoTotale = action.equals("stornoTotale");
		boolean isRimborsoResto = action.equals("rimborsoResto");
		boolean isStornoResto = action.equals("stornoResto");
		if (!isRimborsoTotale && !isStornoTotale && !isRimborsoResto && !isStornoResto) throw new ServletException("Please define an action");

		Date now = new Date();
		Session ses = SessionFactory.getSession();
		Transaction trn = ses.beginTransaction();
		try {
			List<Fatture> fattList = new FattureDao().findByNumeroFattura(ses, numeroFattura);
			if (fattList == null) throw new ServletException("Incorrect numeroFattura");
			if (fattList.size() == 0) throw new ServletException("Incorrect numeroFattura");
			if (fattList.size() > 1) throw new ServletException("More occurrencies of numeroFattura");
			Fatture fattura = fattList.get(0);
			if (fattura.getIdNotaCreditoRimborso() != null || 
					fattura.getIdNotaCreditoStorno() != null) throw new ServletException("Refund has already been done");
			if (isStornoResto && fattura.getIdNotaCreditoResto() != null) throw new ServletException("Refund has already been done");
			List<FattureArticoli> faList = new FattureArticoliDao().findByFattura(ses, fattura.getId());
			//Initing fatture counter
			String prefisso = fattura.getNumeroFattura().substring(0,3);
			ContatoriDao contDao = new ContatoriDao();
			FattureDao fatDao = new FattureDao();
			//Societa societa = GenericDao.findById(ses, Societa.class, fattura.getIdSocieta());
			contDao.initNumFattura(ses, prefisso, now);
				//Creating rimborso (=fattura)
				List<Fatture> rimborsiList = new ArrayList<Fatture>();
				Fatture ndc = new Fatture();
				ndc.setDataCreazione(now);
				ndc.setDataFattura(now);
				ndc.setDataModifica(now);
				ndc.setIdAnagrafica(fattura.getIdAnagrafica());
				ndc.setIdIstanza(fattura.getIdIstanza());
				ndc.setIdPeriodico(fattura.getIdPeriodico());
				ndc.setIdSocieta(fattura.getIdSocieta());
				ndc.setIdTipoDocumento(AppConstants.DOCUMENTO_NOTA_CREDITO);
				ndc.setTipoIva(fattura.getTipoIva());
				ndc.setTotaleFinale(0D);
				ndc.setTotaleImponibile(0D);
				ndc.setTotaleIva(0D);
				//Numero rimborso (=numero fattura)
				Integer numero = new ContatoriDao().nextTempNumFattura(ses, prefisso, now);
				String numeroRimborso = FattureBusiness
						.buildNumeroFattura(prefisso, now, numero);
				ndc.setNumeroFattura(numeroRimborso);
				Integer idNdc = (Integer) fatDao.save(ses, ndc);
				if (isRimborsoTotale) fattura.setIdNotaCreditoRimborso(idNdc);
				if (isStornoTotale) fattura.setIdNotaCreditoStorno(idNdc);
				if (isRimborsoResto || isStornoResto) fattura.setIdNotaCreditoResto(idNdc);
				fatDao.update(ses, fattura);
				rimborsiList.add(ndc);
				//Articoli
				List<FattureArticoli> raList = new ArrayList<FattureArticoli>();
				FattureArticoliDao faDao = new FattureArticoliDao();
				if (isRimborsoTotale || isStornoTotale) { 
					for (FattureArticoli fa:faList) {
						if (fattura.getIdNotaCreditoResto() == null || 
								(!fa.getResto() && fattura.getIdNotaCreditoResto() != null) ) {
							FattureArticoli ra = new FattureArticoli();
							ra.setIdFattura(idNdc);
							ra.setAliquotaIva(fa.getAliquotaIva());
							ra.setDescrizione("Storno fattura "+fattura.getNumeroFattura()+
									" per errato addebito: "+fa.getDescrizione());
							ra.setImportoImpUnit(fa.getImportoImpUnit());
							ra.setImportoIvaUnit(fa.getImportoIvaUnit());
							ra.setImportoTotUnit(fa.getImportoTotUnit());
							ra.setQuantita(fa.getQuantita());
							ra.setResto(fa.getResto());
							ra.setIvaScorporata(fa.getIvaScorporata());
							faDao.save(ses, ra);
							raList.add(ra);
						}
					}
					//Elimina eventuali resti
					removeCrediti(ses, fattura);
					//Se Ã¨ uno storno, crea credito
					if (isStornoTotale) PagamentiMatchBusiness.createCredito(ses,
							fattura, fattura.getTotaleFinale(), 
							fattura.getIdSocieta(), fattura.getIdAnagrafica(), true);
					//Rimuove le opzioni legate a questa fattura
					FattureBusiness.unbindIstanzaOpzioni(ses, fattura);
				}
				if (isRimborsoResto) {
					FattureArticoli ra = new FattureArticoli();
					ra.setIdFattura(idNdc);
					ra.setAliquotaIva(null);
					ra.setDescrizione("Storno anticipo in fattura "+fattura.getNumeroFattura());
					ra.setImportoImpUnit(fattura.getImportoResto());
					ra.setImportoIvaUnit(0D);
					ra.setImportoTotUnit(fattura.getImportoResto());
					ra.setQuantita(1);
					ra.setResto(true);
					ra.setIvaScorporata(false);
					faDao.save(ses, ra);
					raList.add(ra);
					//Elimina eventuali resti
					removeCrediti(ses, fattura);
				}
				if (isStornoResto) {
					FattureArticoli ra = new FattureArticoli();
					ra.setIdFattura(idNdc);
					ra.setAliquotaIva(null);
					ra.setDescrizione("Storno anticipo in fattura "+fattura.getNumeroFattura());
					ra.setImportoImpUnit(fattura.getImportoResto());
					ra.setImportoIvaUnit(0D);
					ra.setImportoTotUnit(fattura.getImportoResto());
					ra.setQuantita(1);
					ra.setResto(true);
					ra.setIvaScorporata(false);
					faDao.save(ses, ra);
					raList.add(ra);
					markCreditiStornati(ses, fattura);
				}
				FattureBusiness.sumIntoFattura(ndc, raList);
				fatDao.update(ses, ndc);
				
				//STAMPA
				FattureStampe stampa = FatturePdfBusiness.createTransientStampaFattura(ses, ndc);
				new FattureStampeDao().save(ses, stampa);

			//** COMMIT ** dei numeri fattura creati
			new ContatoriDao().commitNumFattura(ses, prefisso, now);
			//Return .pdf to HTTP outputstream
			PrintWriter out = new PrintWriter(response.getOutputStream());
			ServletOutputStream binout = response.getOutputStream();
			response.setContentType(stampa.getMimeType());
			response.setHeader("Content-Disposition", "attachment;filename="+stampa.getFileName());
			byte[] sfBytes = stampa.getContent();
			binout.write(sfBytes);
			out.close();
			trn.commit();
		} catch (HibernateException | JRException | BusinessException e) {
			trn.rollback();
			throw new ServletException(e.getMessage());
		} catch (IOException e) {
			trn.rollback();
			throw new ServletException(e.getMessage());
		} finally {
			ses.close();
		}
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		doGet(req, resp);
	}
		
	private void markCreditiStornati(Session ses, Fatture fatturaOrigine) {
		List<PagamentiCrediti> credList = 
				credDao.findByFatturaOrigine(ses, fatturaOrigine.getId());
		for (PagamentiCrediti cred:credList) {
			cred.setStornatoDaOrigine(true);
			credDao.update(ses, cred);
		}
	}
	
	private void removeCrediti(Session ses, Fatture fatturaOrigine) {
		List<PagamentiCrediti> credList = 
				credDao.findByFatturaOrigine(ses, fatturaOrigine.getId());
		for (PagamentiCrediti cred:credList) {
			credDao.delete(ses, cred);
		}
	}
	
	
	
//	private List<FattureStampe> persistStampa(Session ses, List<FatturaBean> beanList)
//			throws BusinessException, JRException, IOException {
//		Locale locale = new Locale("it", "IT");
//		FattureDao fDao = new FattureDao();
//		FattureStampeDao faDao = new FattureStampeDao();
//		List<FattureStampe> stampeList = new ArrayList<FattureStampe>();
//		Map<String, Object> paramMap = new HashMap<String, Object>();
//		paramMap.put(JRParameter.REPORT_LOCALE, locale);
//		paramMap.put("SUBREPORT_DIR", AutomationConstants.REPORT_RESOURCES_PATH+"/");
//		//Produce i singoli report per Istanza
//		for (FatturaBean bean:beanList) {
//			List<FatturaBean> singleItemCollection = new ArrayList<FatturaBean>();
//			singleItemCollection.add(bean);
//			//Attenzione, viene creato un singolo file per tutta la collection
//			JRBeanCollectionDataSource jrds = new JRBeanCollectionDataSource(singleItemCollection);
//			//Creo l'input stream della matrice del report
//			InputStream reportIs = getClass().getResourceAsStream(AutomationConstants.REPORT_TEMPLATE_FATTURE);
//			if (reportIs == null) throw new IOException("Could not find report file "+AutomationConstants.REPORT_TEMPLATE_FATTURE);
//			//Creazione report fondendo dati e struttura
//			JasperPrint print = JasperFillManager.fillReport(reportIs, paramMap, jrds);
//			//Pulizia pagine bianche
//			List<JRPrintPage> pages = print.getPages();
//			for (Iterator<JRPrintPage> i=pages.iterator(); i.hasNext();) {
//				JRPrintPage page = (JRPrintPage)i.next();
//				if (page.getElements().size() == 0) i.remove();
//	        }
//			//Esporta in byte array
//			byte [] pdfStream = JasperExportManager.exportReportToPdf(print);
//			//Persist STAMPA
//			FattureStampe stampa = new FattureStampe();
//			stampa.setFileName(bean.getFileName());
//			stampa.setMimeType("application/pdf");
//			stampa.setContent(pdfStream);
//			stampa.setDataCreazione(new Date());
//			faDao.save(ses, stampa);
//			stampeList.add(stampa);
//			//Add a reference from fattura
//			Fatture fattura = bean.getFattura();
//			fattura.setIdFatturaStampa(stampa.getId());
//			fDao.update(ses, fattura);
//		}
//		return stampeList;
//	}
	
}
