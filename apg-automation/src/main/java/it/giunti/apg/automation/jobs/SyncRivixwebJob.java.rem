package it.giunti.apg.automation.jobs;

import it.giunti.apg.core.Mailer;
import it.giunti.apg.core.ServerConstants;
import it.giunti.apg.core.persistence.SessionFactory;
import it.giunti.apg.shared.AppConstants;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.ValueUtil;
import it.giunti.apg.shared.model.IstanzeAbbonamenti;
import it.giunti.apg.automation.jobs.rivixweb.Rivixweb;
import it.giunti.apg.automation.jobs.rivixweb.RivixwebDao;
import it.giunti.apg.automation.jobs.rivixweb.RivixwebUtil;
import it.giunti.apg.automation.jobs.rivixweb.SessionFactoryAbboWeb;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SyncRivixwebJob implements Job {
	
	static private Logger LOG = LoggerFactory.getLogger(SyncRivixwebJob.class);
	private static final int QUERY_PAGESIZE = 10000;
	private RivixwebUtil util = new RivixwebUtil();
	
	@Override
	public void execute(JobExecutionContext jobCtx) throws JobExecutionException {
		LOG.info("Started job '"+jobCtx.getJobDetail().getKey().getName()+"'");
		//param: backwardDays
		String backwardDaysString = (String) jobCtx.getMergedJobDataMap().get("backwardDays");
		Integer backwardDays = ValueUtil.stoi(backwardDaysString);
		if (backwardDays == null) throw new JobExecutionException("Non sono definiti i giorni di aggiornamento");
		//param: emailRecipients
		String emailRecipients = (String) jobCtx.getMergedJobDataMap().get("emailRecipients");
		if (emailRecipients == null) throw new JobExecutionException("emailRecipients non definito");
		if (emailRecipients.equals("")) throw new JobExecutionException("emailRecipients non definito");
		String[] recipientArray = emailRecipients.split(AppConstants.STRING_SEPARATOR);
		//JOB
		Calendar cal = new GregorianCalendar();
		cal.add(Calendar.DAY_OF_MONTH, (-1)*backwardDays);
		Date startDt = cal.getTime();
		List<IstanzeAbbonamenti> updatedIa = null;
		List<Rivixweb> rivixwebList = null;
		int offset = 0;
		try {
			do {
				updatedIa = util.findModifiedInstances(startDt, offset, QUERY_PAGESIZE);	
				rivixwebList = convertToRivixweb(updatedIa);
				saveOrUpdateRivixwebList(rivixwebList);
				offset += updatedIa.size();
				//LOG.info("Exported "+offset+" lines to Rivixweb");
			} while (updatedIa.size() == QUERY_PAGESIZE);
		} catch (BusinessException e) {
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e.getMessage(), e);
		}
		//Spedisce il report
		String subject = "[APG - "+jobCtx.getJobDetail().getKey().getName()+"] "+offset+" righe esportate";
		sendReport(subject, recipientArray, offset);
		LOG.info("Ended job '"+jobCtx.getJobDetail().getKey().getName()+"'");
	}
	
	private List<Rivixweb> convertToRivixweb(List<IstanzeAbbonamenti> updatedIa) throws BusinessException {
		List<Rivixweb> result = new ArrayList<Rivixweb>();
		Session ses = SessionFactory.getSession();
		try {
			for (IstanzeAbbonamenti ia:updatedIa) {
				List<Rivixweb> riwList = util.convertToRivixweb(ses, ia);
				result.addAll(riwList);
			}
		} catch (HibernateException e) {
			throw new BusinessException(e.getMessage(), e);
		} finally {
			ses.close();
		}
		return result;
	}
	
	@SuppressWarnings("unchecked")
	private void saveOrUpdateRivixwebList(List<Rivixweb> rivixwebList) throws BusinessException {
		Session sesAbbWeb = SessionFactoryAbboWeb.getSession();
		Transaction trn = sesAbbWeb.beginTransaction();
		RivixwebDao rwDao = new RivixwebDao();
		try {
			String caFindQuery = "from Rivixweb where codiceAbbonato = :s1";
			for (Rivixweb rix:rivixwebList) {
				Query caQ = sesAbbWeb.createQuery(caFindQuery);
				caQ.setString("s1", rix.getCodiceAbbonato());
				List<Rivixweb> resultList = (List<Rivixweb>) caQ.list();
				if (resultList == null) resultList = new ArrayList<Rivixweb>();
				if (resultList.size() > 0) {
					//Esiste => update
					Rivixweb rixDb = resultList.get(0);
					rix.setId(rixDb.getId());
					BeanUtils.copyProperties(rixDb, rix);
					rwDao.update(sesAbbWeb, rixDb);
				} else {
					//Nuovo => save
					rwDao.save(sesAbbWeb, rix);
				}
			}
			trn.commit();
		} catch (Exception e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} finally {
			sesAbbWeb.close();
		}
	}
	
	private void sendReport(String subject, String[] recipients,
			Integer totale) {
		String message = "Sono stati esportati verso la tabella RIVIXWEB " + totale + " " +
			"abbonamenti. ";
		try {
			LOG.info(message);
			Mailer.postMail(ServerConstants.SMTP_HOST,
					ServerConstants.SMTP_FROM,
					recipients, subject, message, false);
		} catch (Exception e) {
			LOG.error(e.getMessage(), e);
		}
	}
}
