package it.giunti.apgautomation.server;

import it.giunti.apg.server.ConfigUtil;
import it.giunti.apg.server.ServerConstants;
import it.giunti.apg.server.VisualLogger;
import it.giunti.apg.server.business.FtpBusiness;
import it.giunti.apg.server.business.FtpConfig;
import it.giunti.apg.server.business.PagamentiMatchBusiness;
import it.giunti.apg.server.persistence.FattureDao;
import it.giunti.apg.server.persistence.FattureStampeDao;
import it.giunti.apg.server.persistence.GenericDao;
import it.giunti.apg.server.persistence.PagamentiDao;
import it.giunti.apg.server.persistence.SessionFactory;
import it.giunti.apg.server.services.LoggingServiceImpl;
import it.giunti.apg.shared.AppConstants;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.EmptyResultException;
import it.giunti.apg.shared.model.Anagrafiche;
import it.giunti.apg.shared.model.Fatture;
import it.giunti.apg.shared.model.FattureStampe;
import it.giunti.apg.shared.model.IstanzeAbbonamenti;
import it.giunti.apg.shared.model.OpzioniIstanzeAbbonamenti;
import it.giunti.apg.shared.model.Pagamenti;
import it.giunti.apg.shared.model.Societa;
import it.giunti.apgautomation.server.business.EntityBusiness;
import it.giunti.apgautomation.server.business.FattureTxtBusiness;
import it.giunti.apgautomation.server.jobs.FatturePagamentiJob;
import it.giunti.apgautomation.server.report.FatturaBean;
import it.giunti.apgautomation.server.report.FattureDataSource;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JRPrintPage;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.type.DateType;
import org.hibernate.type.DoubleType;
import org.hibernate.type.StringType;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CreateFatture2017 implements Job {

	//private static final long serialVersionUID = 4394668127625471725L;
	static private Logger LOG = LoggerFactory.getLogger(CreateFatture2017.class);
	
	static private String REPORT_TITLE = "Creazione PDF fatture retroattive 2017";
	static private String SUFFIX = "";//TODO
	static private boolean PROD = true;//TODO
	
	static private String[] idSocietaArray = {"GE", "GS", "OS"};

	@Override
	public void execute(JobExecutionContext jobCtx) throws JobExecutionException {
		LOG.info("Started job '"+jobCtx.getJobDetail().getKey().getName()+"'");
		try {
			rimozioneMaialaio2016();
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("01/01/2017"),ServerConstants.FORMAT_DAY.parse("15/01/2017"));
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("15/01/2017"),ServerConstants.FORMAT_DAY.parse("31/01/2017"));
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("31/01/2017"),ServerConstants.FORMAT_DAY.parse("15/02/2017"));
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("15/02/2017"),ServerConstants.FORMAT_DAY.parse("28/02/2017"));
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("28/02/2017"),ServerConstants.FORMAT_DAY.parse("15/03/2017"));
			executeCreateFatture(ServerConstants.FORMAT_DAY.parse("15/03/2017"),new Date());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		LOG.info("Ended job");
	}
	
	
	public void executeCreateFatture(Date startDt, Date finishDt) throws JobExecutionException {
		//JOB
		Integer idRapporto = null;
		try {
			idRapporto = new LoggingServiceImpl().createRapporto(
					REPORT_TITLE,
					ServerConstants.DEFAULT_SYSTEM_USER);
		} catch (BusinessException e) {
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e);
		} catch (EmptyResultException e) {
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e);
		}
		String avviso = "";
		
		// Extract fatture
		Session ses = SessionFactory.getSession();
  		Transaction trn = ses.beginTransaction();
  		try {
			/* ** CREAZIONE FATTURE+ARTICOLI E, dopo, STAMPE (a partire dai bean) ** */
			
			FtpConfig ftpConfigDebug = ConfigUtil.loadFtpFattureRegistri(ses, true);
			Set<Societa> societaSet = new HashSet<Societa>();
			for (String idSocieta:idSocietaArray) {
				Societa s = GenericDao.findById(ses, Societa.class, idSocieta);
				if (s != null) societaSet.add(s);
			}
			EntityBusiness.periodiciFromUidArray(ses, idSocietaArray);
			List<Fatture> fattureFinalList = new ArrayList<Fatture>();
			FattureDao fDao = new FattureDao();
			PagamentiDao pagDao = new PagamentiDao();
			//Ciclo su tutte le societa
			for (Societa societa:societaSet) {
				List<Pagamenti> pagList = null;
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Ricerca pagamenti da fatturare per "+societa.getId()+": <b>"+
						societa.getNome()+"</b> dal "+
						ServerConstants.FORMAT_TIMESTAMP.format(startDt)+" al "+
						ServerConstants.FORMAT_TIMESTAMP.format(finishDt));
				try {
					pagList = findPagamentiDaFatturare(ses,
							societa.getId(), startDt, finishDt, idRapporto);
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione data source");
				} catch (EmptyResultException e) {
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Nessun dato da estrarre");
				}
				if (pagList != null) {
					VisualLogger.get().addHtmlInfoLine(idRapporto, "<b>FASE 1 - "+societa.getId()+"</b>: raccolta dati e creazione oggetti");
					//** INIT ** dei numeri fattura creati
					//fDao.initNumFatture(ses, finishDt, societa.getId());
						List<Fatture> newFattureList = new ArrayList<Fatture>();
						int i = 0;
						//Creazione oggetti Fatture senza produrre i byte[] di stampa
						for (Pagamenti pag:pagList) {
							if (!pag.getIdTipoPagamento().equals(AppConstants.PAGAMENTO_RESTO) &&
									!pag.getIdTipoPagamento().equals(AppConstants.PAGAMENTO_ABBUONO)) {
								Anagrafiche pagante = pag.getAnagrafica();
								IstanzeAbbonamenti ia = pag.getIstanzaAbbonamento();
								if (ia != null) {
									//Pagamento matches an Istanza:
									List<Integer> idPagList = new ArrayList<Integer>();
									idPagList.add(pag.getId());
									List<Integer> idOpzList = new ArrayList<Integer>();
									for (OpzioniIstanzeAbbonamenti oia:ia.getOpzioniIstanzeAbbonamentiSet())
											idOpzList.add(oia.getOpzione().getId());
									PagamentiMatchBusiness.processPayment(ses, 
											pag.getDataAccredito(), idPagList, null,
											ia.getId(), idOpzList);

//									IstanzeAbbonamenti ia = pag.getIstanzaAbbonamento();
//									Fatture fattura = FattureBusiness.saveFatturaConNumero(ses, pagante,
//											pag.getIdSocieta(), pag.getDataAccredito(),
//											ia.getListino().getFatturaInibita());
//									//Persist invoice bounding its articles
//									//Create & bind ArticoliFattura
//									List<Pagamenti> list = new ArrayList<Pagamenti>();
//									list.add(pag);
//									Set<Integer> idOpzSet = new HashSet<Integer>();
//									for (OpzioniIstanzeAbbonamenti oia:ia.getOpzioniIstanzeAbbonamentiSet())
//											idOpzSet.add(oia.getOpzione().getId());
//									FattureBusiness.bindIstanzeOpzioni(ses, fattura, ia, 
//											ia.getOpzioniIstanzeAbbonamentiSet());
//									FattureBusiness.bindPagamentiCrediti(ses, fattura, ia, list, null);
//									List<FattureArticoli> faList = FattureBusiness
//											.bindFattureArticoli(ses, fattura,
//											pag.getImporto(), null, pagante, ia, 
//											new ArrayList<Integer>(idOpzSet));
//									FattureBusiness.sumIntoFattura(fattura, faList);
//									fDao.update(ses, fattura);
//									newFattureList.add(fattura);
//									pag.setIdFattura(fattura.getId());
								} else {
									//Pagamento doesn't match a subscription but only a client:
									//Make a deposit invoice
									if (pag.getAnagrafica() != null) {
										PagamentiMatchBusiness.processPayment(ses, pag.getDataAccredito(),
												pag.getId(), pagante.getId(), pag.getIdSocieta(), false);
										
//										Fatture fattura = FattureBusiness.saveFatturaConNumero(ses, pagante,
//												pag.getIdSocieta(), pag.getDataAccredito(), false);
//										List<FattureArticoli> faList = FattureBusiness
//												.bindFattureArticoliAnticipo(ses, fattura,
//												ivaScorporata, pag.getImporto());
//										FattureBusiness.sumIntoFattura(fattura, faList);
//										fDao.update(ses, fattura);
//										newFattureList.add(fattura);
//										pag.setIdFattura(fattura.getId());
									} else {
										//Pagamento has not been registered
										pag.setIdErrore(AppConstants.PAGAMENTO_ERR_NON_ABBINABILE);
										pag.setDataAccredito(null);
										pagDao.update(ses, pag);
									}
								}
								i++;
								if (i % ServerConstants.FATTURE_PAGE_SIZE == 0) {
									ses.flush();
									VisualLogger.get().addHtmlInfoLine(idRapporto, "Elaborazione dati di "+i+" pagamenti in corso");
								}
							}
						}
						VisualLogger.get().addHtmlInfoLine(idRapporto, "Raccolti dati di "+newFattureList.size()+" fatture "+societa.getId());
					//** COMMIT ** dei numeri fattura creati
					//fDao.commitNumFatture(ses, newFattureList);
				}
				
				VisualLogger.get().addHtmlInfoLine(idRapporto, "<b>FASE 2 - "+societa.getId()+"</b>: stampa PDF e caricamento");
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Ricerca fatture per cui produrre stampe");
				List<Fatture> printableList = fDao.findNotYetPrintedBySocietaData(ses, 
						societa.getId(), startDt, finishDt, false);
				
				List<FatturaBean> beanList = new ArrayList<FatturaBean>();
				if (printableList.size() > 0) {
					//Data source per jasperReports
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Inizializzazione dei dati del report");
					FattureDataSource.initDataSource(idRapporto, printableList);
					beanList = FattureDataSource.createBeanCollection(ses);
				}
				VisualLogger.get().addHtmlInfoLine(idRapporto, beanList.size()+" fatture da stampare in PDF");
				//Produzione dei dati PDF
				if (beanList.size() > 0) {
					//Rendering
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Rendering delle fatture");
					List<FattureStampe> stampeList = persistStampe(idRapporto, ses, beanList);//Crea PDF & visual logs
					VisualLogger.get().addHtmlInfoLine(idRapporto, "<b>"+beanList.size()+" fatture create</b>");
					
					//FTP
					FtpConfig ftpConfig = ConfigUtil.loadFtpPdfBySocieta(ses, societa.getId());
					uploadStampe(idRapporto, stampeList, ftpConfig, ftpConfigDebug);
					fattureFinalList.addAll(printableList);
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Totale parziale: "+fattureFinalList.size()+" stampe PDF");
					if (avviso.length() > 0) avviso +=", ";
					avviso +=societa.getNome()+" ("+beanList.size()+")";
				} else {
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Nessun file PDF creato.");
				}

			}
			
			
			/* ** CREAZIONE FILE ACCOMPAGNAMENTO ** */
			
			
			if (fattureFinalList != null) {
				VisualLogger.get().addHtmlInfoLine(idRapporto, fattureFinalList.size()+" fatture da inserire nel file di accompagnamento");
				if (fattureFinalList.size() > 0) {
					//Ciclo per società
					for (Societa societa:societaSet) {
						if (PROD) {
							FtpConfig ftpConfig = ConfigUtil.loadFtpPdfBySocieta(ses, societa.getId());
							uploadAccompagnamentoPdfFile(idRapporto, ses, societa.getId(), SUFFIX,
									fattureFinalList, finishDt, ftpConfig);
						} else {
							uploadAccompagnamentoPdfFile(idRapporto, ses, societa.getId(), SUFFIX,
									fattureFinalList, finishDt, ftpConfigDebug);
						}
					}
				}
			}
			
			trn.commit();
	  	} catch (HibernateException e) {
			trn.rollback();
			VisualLogger.get().addHtmlErrorLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
		} catch (BusinessException e) {
			trn.rollback();
			VisualLogger.get().addHtmlErrorLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
	  	} catch (IOException e) {
			trn.rollback();
			VisualLogger.get().addHtmlErrorLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
	  	} catch (JRException e) {
			trn.rollback();
			VisualLogger.get().addHtmlErrorLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
		} finally {
			ses.close();
			try {
				VisualLogger.get().closeAndSaveRapporto(idRapporto);
			} catch (BusinessException e) {
				LOG.error(e.getMessage(), e);
				throw new JobExecutionException(e);
			}
		}
		//Avviso FATTURE
		if (avviso.length() > 0) {
			avviso = "Estrazione fatture per "+avviso;
			LOG.error(avviso);
		}
	}

	
	private void uploadStampe(int idRapporto, List<FattureStampe> stampeList,
			FtpConfig ftpConfig, FtpConfig ftpConfigDebug)
			throws BusinessException {
		try {
			// FTP
			if (PROD) VisualLogger.get().addHtmlInfoLine(idRapporto, "Caricamento su ftp://"+ftpConfig.getHost()+"/"+ftpConfig.getDir()+" in corso");
			for (FattureStampe stampa:stampeList) {
				//Creazione file
				File sfTmpFile = File.createTempFile("stampeFatture", ".pdf");
				sfTmpFile.deleteOnExit();
				byte b[]=stampa.getContent();
				FileOutputStream fos = new FileOutputStream(sfTmpFile);
				fos.write(b);
			    fos.close();
				//Upload FTP
				//VisualLogger.get().addHtmlInfoLine(idRapporto, "ftp://"+ftpDestUsername+"@"+ftpDestHost+"/"+remoteNameAndDir);
				if (PROD) {
					String debugRemoteNameAndDir = ftpConfig.getDir()+"/"+stampa.getFileName()+SUFFIX;
					FtpBusiness.upload(ftpConfig.getHost(), ftpConfig.getPort(),
							ftpConfig.getUsername(), ftpConfig.getPassword(),
							debugRemoteNameAndDir, sfTmpFile);
				} else {
					String remoteNameAndDir = ftpConfigDebug.getDir()+"/"+
							stampa.getFileName()+SUFFIX;
					FtpBusiness.upload(ftpConfigDebug.getHost(), ftpConfigDebug.getPort(),
							ftpConfigDebug.getUsername(), ftpConfigDebug.getPassword(),
							remoteNameAndDir, sfTmpFile);
				}
				sfTmpFile.delete();
			}
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Caricamento FTP "+stampeList.size()+" fatture OK");
		} catch (IOException e) {
			LOG.error(e.getMessage(), e);
			VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage());
			throw new BusinessException(e.getMessage(), e);
		}
	}
	
	private List<FattureStampe> persistStampe(Integer idRapporto,
			Session ses, List<FatturaBean> beanList)
			throws BusinessException, JRException, IOException {
		Locale locale = new Locale("it", "IT");
		FattureDao fDao = new FattureDao();
		FattureStampeDao faDao = new FattureStampeDao();
		List<FattureStampe> stampeList = new ArrayList<FattureStampe>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(JRParameter.REPORT_LOCALE, locale);
		paramMap.put("SUBREPORT_DIR", AutomationConstants.REPORT_RESOURCES_PATH+"/");
		VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione dei pdf delle fatture e salvataggio su database");
		int c = 0;
		//Produce i singoli report per Istanza
		for (FatturaBean bean:beanList) {
			List<FatturaBean> singleItemCollection = new ArrayList<FatturaBean>();
			singleItemCollection.add(bean);
			//Attenzione, viene creato un singolo file per tutta la collection
			JRBeanCollectionDataSource jrds = new JRBeanCollectionDataSource(singleItemCollection);
			//Creo l'input stream della matrice del report
			InputStream reportIs = getClass().getResourceAsStream(AutomationConstants.REPORT_TEMPLATE_FATTURE);
			if (reportIs == null) throw new IOException("Could not find report file "+AutomationConstants.REPORT_TEMPLATE_FATTURE);
			//Creazione report fondendo dati e struttura
			JasperPrint print = JasperFillManager.fillReport(reportIs, paramMap, jrds);
			//Pulizia pagine bianche
			List<JRPrintPage> pages = print.getPages();
			for (Iterator<JRPrintPage> i=pages.iterator(); i.hasNext();) {
				JRPrintPage page = (JRPrintPage)i.next();
				if (page.getElements().size() == 0) i.remove();
	        }
			byte [] pdfStream = JasperExportManager.exportReportToPdf(print);
			//Persist STAMPA
			FattureStampe stampa = new FattureStampe();
			stampa.setFileName(bean.getFileName());
			stampa.setMimeType("application/pdf");
			stampa.setContent(pdfStream);
			stampa.setDataCreazione(new Date());
			faDao.save(ses, stampa);
			stampeList.add(stampa);
			//Add a reference from fattura
			Fatture fattura = bean.getFattura();
			fattura.setIdFatturaStampa(stampa.getId());
			fDao.update(ses, fattura);
			//LOG
			String codAbbo = "";
			if (bean.getIstanzaAbbonamento() != null) {
				codAbbo = " <b>"+bean.getIstanzaAbbonamento().getAbbonamento().getCodiceAbbonamento()+"</b> "+
						"["+bean.getIstanzaAbbonamento().getId()+"]";
			}
			VisualLogger.get().addHtmlInfoLine(idRapporto,
					"<b>"+bean.getFatturaNumero()+"</b>"+
					" "+ServerConstants.FORMAT_DAY.format(bean.getFatturaData())+
					" imp &euro;"+ServerConstants.FORMAT_CURRENCY.format(bean.getTotaleImponibile())+
					" iva &euro;"+ServerConstants.FORMAT_CURRENCY.format(bean.getTotaleIva())+
					" TOT &euro;"+ServerConstants.FORMAT_CURRENCY.format(bean.getTotaleFinale())+
					codAbbo+" pag:"+bean.getIdTipoPagamento());
			c++;
			if (c % ServerConstants.FATTURE_PAGE_SIZE == 0) ses.flush();
		}
		VisualLogger.get().addHtmlInfoLine(idRapporto, "Terminata la creazione e salvataggio dei pdf");
		return stampeList;
	}
	
	// File accompagnamento
	
	
	private void uploadAccompagnamentoPdfFile(int idRapporto, Session ses,
			String filteringIdSocieta, String suffix, List<Fatture> fattureListToFilter, Date today,
			FtpConfig ftpConfig) 
			throws BusinessException {
		try {
			Societa societa = GenericDao.findById(ses, Societa.class, filteringIdSocieta);
			//Filter list by societa
			List<Fatture> fattureFilteredList = new ArrayList<Fatture>();
			for (Fatture sf:fattureListToFilter) {
				if (sf.getIdSocieta().equals(filteringIdSocieta) &&
						!sf.getNumeroFattura().substring(0, 3).equals(AppConstants.FATTURE_PREFISSO_FITTIZIO)) {
					fattureFilteredList.add(sf);
				}
			}
			//We have a filtered list now
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Fatture PDF per "+societa.getNome()+": "+fattureFilteredList.size()+" (delle "+fattureListToFilter.size()+" di oggi)");
			if (fattureFilteredList.size() > 0) {
				//File accompagnamento
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione del <b>file di accompagnamento PDF "
						+societa.getNome()+"</b>");
				File corFile = FattureTxtBusiness.createAccompagnamentoPdfFile(ses, fattureFilteredList, societa);
				String corRemoteNameAndDir = ftpConfig.getDir()+"/"+societa.getCodiceSocieta()+
						"_datixarchi_"+ServerConstants.FORMAT_FILE_NAME_TIMESTAMP.format(new Date())+suffix+"."+societa.getPrefissoFatture();
				VisualLogger.get().addHtmlInfoLine(idRapporto, "ftp://"+ftpConfig.getUsername()+"@"+ftpConfig.getHost()+"/"+corRemoteNameAndDir);
				FtpBusiness.upload(ftpConfig.getHost(), ftpConfig.getPort(), ftpConfig.getUsername(), ftpConfig.getPassword(),
						corRemoteNameAndDir, corFile);
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Caricamento FTP del <b>file di accompagnamento per "+
						societa.getNome()+"</b> terminato");
				//File carta docente
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione del <b>file carta docente per "
						+societa.getNome()+"</b>");
				try {
					File cdoFile = FattureTxtBusiness.createCartaDocenteFile(ses, fattureFilteredList, societa);
					String cdoRemoteNameAndDir = ftpConfig.getDir()+"/"+societa.getCodiceSocieta()+
							"_cartadocente_"+ServerConstants.FORMAT_FILE_NAME_TIMESTAMP.format(new Date())+suffix+".csv";
					VisualLogger.get().addHtmlInfoLine(idRapporto, "ftp://"+ftpConfig.getUsername()+"@"+ftpConfig.getHost()+"/"+cdoRemoteNameAndDir);
					FtpBusiness.upload(ftpConfig.getHost(), ftpConfig.getPort(), ftpConfig.getUsername(), ftpConfig.getPassword(),
							cdoRemoteNameAndDir, cdoFile);
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Caricamento FTP del <b>file carta docente per "+
							societa.getNome()+"</b> terminato");
				} catch (EmptyResultException e) {
					VisualLogger.get().addHtmlInfoLine(idRapporto, "Nessuna fattura relativa a <b>carta docente per "+
							societa.getNome()+"</b>, file non generato");
				}
			}
		} catch (HibernateException e) {
			LOG.error(e.getMessage(), e);
			throw new BusinessException(e.getMessage(), e);
		} catch (MalformedURLException e) {
			LOG.error(e.getMessage(), e);
			throw new BusinessException(e.getMessage(), e);
		} catch (IOException e) {
			LOG.error(e.getMessage(), e);
			throw new BusinessException(e.getMessage(), e);
		}

	}
	
	@SuppressWarnings("unchecked")
	public static List<Pagamenti> findPagamentiDaFatturare(Session ses, String idSocieta, 
			Date fromDate, Date toDate, int idRapporto)
			throws HibernateException, EmptyResultException {
		List<Pagamenti> finalList = new ArrayList<Pagamenti>();
		List<Pagamenti> pList = null;
		int size = ServerConstants.FATTURE_PAGE_SIZE;
		do {
			String iaHql = "from Pagamenti pag where " +
					"pag.importo > :d1 and "+
					"pag.idFattura is null and "+
					"pag.idSocieta = :s1 and " + //Societa
					"pag.dataAccredito >= :dt1 and " +
					"pag.dataAccredito <= :dt2 " +
					"order by pag.dataAccredito asc ";
			Query iaQ = ses.createQuery(iaHql);
			iaQ.setParameter("d1", 0d, DoubleType.INSTANCE);
			iaQ.setParameter("dt1", fromDate, DateType.INSTANCE);
			iaQ.setParameter("dt2", toDate, DateType.INSTANCE);
			iaQ.setParameter("s1", idSocieta, StringType.INSTANCE);
			iaQ.setFirstResult(finalList.size());
			iaQ.setMaxResults(size);
			pList = iaQ.list();
			finalList.addAll(pList);
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Trovati "+finalList.size()+" pagamenti per "+idSocieta);
			ses.flush();
		} while (pList.size() > 0);
		VisualLogger.get().addHtmlInfoLine(idRapporto, "Query terminata: "+finalList.size()+" pagamenti per "+idSocieta);
		
		if (finalList.size() == 0) throw new EmptyResultException("Nessun pagamento da fatturare");
		return finalList;
	}

	private static void rimozioneMaialaio2016() throws JobExecutionException {
		//JOB
		Integer idRapporto = null;
		try {
			idRapporto = new LoggingServiceImpl().createRapporto(
					REPORT_TITLE,
					ServerConstants.DEFAULT_SYSTEM_USER);
		} catch (BusinessException e) {
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e);
		} catch (EmptyResultException e) {
			LOG.error(e.getMessage(), e);
			throw new JobExecutionException(e);
		}
		String avviso = "";

		// Extract fatture
		PagamentiDao pagDao = new PagamentiDao();
		Session ses = SessionFactory.getSession();
  		Transaction trn = ses.beginTransaction();
  		try {
  			Date primoDicembre = ServerConstants.FORMAT_DAY.parse("01/12/2016");
  			Date dueGennaio = ServerConstants.FORMAT_DAY.parse("02/01/2017");
  			List<Fatture> fattList = new ArrayList<Fatture>();
  			for (String idSocieta:idSocietaArray) {
  	  			int count = 0;
				List<Pagamenti> pagList = findPagamentiDaFatturare(ses, idSocieta,
						ServerConstants.FORMAT_DAY.parse("01/01/2016"),
						ServerConstants.FORMAT_DAY.parse("31/12/2016"), idRapporto);
				for (Pagamenti pag:pagList) {
					if (!pag.getIdTipoPagamento().equals(AppConstants.PAGAMENTO_RESTO) &&
							!pag.getIdTipoPagamento().equals(AppConstants.PAGAMENTO_ABBUONO)) {
						//Non è resto o abbuono
						if (pag.getIstanzaAbbonamento() != null) {
							if (pag.getIstanzaAbbonamento().getListino().getFatturaInibita() ||
									!pag.getIstanzaAbbonamento().getPagato() ||
									pag.getDataPagamento().before(primoDicembre)) {
								//Crea la fattura ZZZ senza cambiare data
								PagamentiMatchBusiness.processPayment(ses, pag.getDataAccredito(),
										pag.getId(), pag.getAnagrafica().getId(), pag.getIdSocieta(), true);
							} else {
								//Crea fattura con registrazione al 2 gennaio
								if (pag.getIdFattura() == null) {
									Date oldAccredito = pag.getDataAccredito();
									pag.setDataAccredito(dueGennaio);
									List<Pagamenti> pagIaList = pagDao.findByIstanzaAbbonamento(ses, pag.getIstanzaAbbonamento().getId());
									List<Integer> idPagList = new ArrayList<Integer>();
									for (Pagamenti pagIa:pagIaList) idPagList.add(pagIa.getId());
									List<Integer> idOpzList = new ArrayList<Integer>();
									if (pag.getIstanzaAbbonamento().getOpzioniIstanzeAbbonamentiSet() != null) {
										for (OpzioniIstanzeAbbonamenti oia:pag.getIstanzaAbbonamento().getOpzioniIstanzeAbbonamentiSet())
											idOpzList.add(oia.getOpzione().getId());
									}
									Fatture fattura = PagamentiMatchBusiness.processPayment(ses,
											dueGennaio, idPagList, null, 
											pag.getIstanzaAbbonamento().getId(), idOpzList);
									fattList.add(fattura);
									VisualLogger.get().addHtmlInfoLine(idRapporto, fattura.getNumeroFattura()+" per "+
									pag.getIstanzaAbbonamento().getAbbonamento().getCodiceAbbonamento()+
									" pag:"+ServerConstants.FORMAT_DAY.format(pag.getDataPagamento())+
									" accr:"+ServerConstants.FORMAT_DAY.format(oldAccredito)+"->"+ServerConstants.FORMAT_DAY.format(pag.getDataAccredito())+
									" creato:"+ServerConstants.FORMAT_DAY.format(pag.getDataCreazione()));
								}
							}
						} else {
							//Non abbinato
							//Crea la fattura ZZZ senza cambiare data
							if (pag.getAnagrafica() != null)
									PagamentiMatchBusiness.processPayment(ses, pag.getDataAccredito(),
											pag.getId(), pag.getAnagrafica().getId(), pag.getIdSocieta(), true);
						}
					}
					count++;
					if (count%ServerConstants.FATTURE_PAGE_SIZE == 0)
						VisualLogger.get().addHtmlInfoLine(idRapporto, 
								"Elaborati "+count+"/"+pagList.size()+" per "+idSocieta);
				}
			}
			trn.commit();
	  	} catch (EmptyResultException|HibernateException|ParseException|BusinessException e) {
			trn.rollback();
			VisualLogger.get().addHtmlErrorLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
		} finally {
			ses.close();
			try {
				VisualLogger.get().closeAndSaveRapporto(idRapporto);
			} catch (BusinessException e) {
				LOG.error(e.getMessage(), e);
				throw new JobExecutionException(e);
			}
		}
		//Avviso FATTURE
		if (avviso.length() > 0) {
			avviso = "Estrazione fatture <b>anni precedenti</b> per "+avviso;
			LOG.error(avviso);
		}
	}
}
