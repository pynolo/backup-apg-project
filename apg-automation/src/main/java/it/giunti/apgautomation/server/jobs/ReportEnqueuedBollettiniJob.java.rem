package it.giunti.apgautomation.server.jobs;

import it.giunti.apgautomation.server.AutomationConstants;
import it.giunti.apgautomation.server.VisualLogger;
import it.giunti.apgautomation.server.ServerConstants;
import it.giunti.apgautomation.server.business.AvvisiBusiness;
import it.giunti.apgautomation.server.business.OutputComunicazioniBusiness;
import it.giunti.apgautomation.server.business.SortBusiness;
import it.giunti.apgautomation.server.jobs.business.EntityBusiness;
import it.giunti.apgautomation.server.jobs.business.ReportUtil;
import it.giunti.apgautomation.server.persistence.SessionFactory;
import it.giunti.apgautomation.server.report.BollettiniEcDataSource;
import it.giunti.apgautomation.server.report.Bollettino;
import it.giunti.apgautomation.server.services.LoggingServiceImpl;
import it.giunti.apgautomation.shared.AppConstants;
import it.giunti.apgautomation.shared.BusinessException;
import it.giunti.apgautomation.shared.EmptyResultException;
import it.giunti.apgautomation.shared.model.EvasioniComunicazioni;
import it.giunti.apgautomation.shared.model.Periodici;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.logging.Log;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.jdbc.Work;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class ReportEnqueuedBollettiniJob implements Job {
	
	//private static final long serialVersionUID = 4394668127625471725L;
	static private Logger LOG = LoggerFactory.getLogger(ReportEnqueuedBollettiniJob.class);
	
	private List<String> idTipoMediaList = new ArrayList<String>();
	
	@Override
	public void execute(JobExecutionContext jobCtx) throws JobExecutionException {
		LOG.info("Started job '"+jobCtx.getJobDetail().getKey().getName()+"'");
		Date today = new Date();
		//param: letterePeriodici
		String letterePeriodici = (String) jobCtx.getMergedJobDataMap().get("letterePeriodici");
		if (letterePeriodici == null) throw new JobExecutionException("letterePeriodici non definito");
		if (letterePeriodici.equals("")) throw new JobExecutionException("letterePeriodici non definito");
		String[] lettereArray = letterePeriodici.split(AppConstants.STRING_SEPARATOR);
		//param: idTipoMediaList
		String idTipoMediaListParam = (String) jobCtx.getMergedJobDataMap().get("idTipoMediaList");
		if (idTipoMediaListParam != null) {
			String[] array = idTipoMediaListParam.split(AppConstants.STRING_SEPARATOR);
			for (String s:array) {
				idTipoMediaList.add(s);
			}
		}
		//param: suffix
		String suffix = (String) jobCtx.getMergedJobDataMap().get("suffix");
		if (suffix == null) {
			suffix = "";
		} else {
			suffix = " " +suffix;
		}
		//JOB
		Integer idRapporto;
		try {
			idRapporto = new LoggingServiceImpl().createRapporto(
					jobCtx.getJobDetail().getKey().getName(),
					ServerConstants.DEFAULT_SYSTEM_USER);
		} catch (DatabaseException e) {
			throw new JobExecutionException(e);
		} catch (EmptyResultException e) {
			throw new JobExecutionException(e);
		}
		// Extract arretrati
		try {
			String avviso = "";
			//Ciclo su tutti i periodici
			List<Periodici> periodici = EntityBusiness.periodiciFromLettere(lettereArray);
			for (Periodici periodico:periodici) {
				//Cerca tutte le comunicazioni per i nuovi attivati e genera gli EvasioniComunicazioni
				Logger.get().addHtmlLogLine(idRapporto, "Estrazione bollettini/ndd accodati per <b>"+periodico.getNome()+"</b>");
				List<EvasioniComunicazioni> ecList = new ArrayList<EvasioniComunicazioni>();
				List<EvasioniComunicazioni> list = null;
				for (String idTipoMedia:idTipoMediaList) {
					try {
						list = OutputComunicazioniBusiness
								.findOr_Create_EvasioniComunicazioniProgrammate(
									today, periodico.getId(),
									idTipoMedia, AppConstants.COMUN_ATTIVAZ_ALLA_CREAZIONE,
									null,
									idRapporto, ServerConstants.DEFAULT_SYSTEM_USER);
					} catch (EmptyResultException e) {}
					ecList.addAll(list);
					try {
						list = OutputComunicazioniBusiness
								.findOrCreateEvasioniComunicazioniProgrammate(
									today, periodico.getId(),
									idTipoMedia, AppConstants.COMUN_ATTIVAZ_AL_PAGAMENTO,
									null,
									idRapporto, ServerConstants.DEFAULT_SYSTEM_USER);
					} catch (EmptyResultException e) {}
					ecList.addAll(list);
					try {
						list = OutputComunicazioniBusiness
								.findEvasioniComunicazioniManuali(
									periodico.getId(), idTipoMedia,
									idRapporto);
					} catch (EmptyResultException e) {}
					ecList.addAll(list);
				}
				//Ordinamento
				Logger.get().addHtmlLogLine(idRapporto, "Ordinamento per cap");
				new SortBusiness().sortEvasioniComunicazioni(ecList);
				//Creazione report
				if (ecList.size() == 0) {
					Logger.get().addHtmlLogLine(idRapporto, "Nessun bollettino/ndd da spedire");
				} else {
					//Data source
					Logger.get().addHtmlLogLine(idRapporto, "Creazione data source");
					BollettiniDataSource.initDataSource(ecList);
					List<Bollettino> bolCollection = BollettiniDataSource.createBeanCollection();
					Logger.get().addHtmlLogLine(idRapporto, "Disegno il report");
					Date date = new Date();
					createAndExportReport(idRapporto, bolCollection, periodico.getNome()+suffix, date);
					//marca come stampati
					Logger.get().addHtmlLogLine(idRapporto, "Scrittura su DB in corso");
					OutputComunicazioniBusiness.writeEvasioniComunicazioniOnDb(
							ecList, date, idRapporto, ServerConstants.DEFAULT_SYSTEM_USER);
					if (bolCollection.size() > 0) avviso += "'"+periodico.getNome()+"' ";
					Logger.get().addHtmlLogLine(idRapporto, "Scrittura su DB terminata");
				}
			}
			//Avviso
			if (avviso.length() > 0) {
				String tipo = "";
				for (String idTipoMedia:idTipoMediaList) {
					tipo += AppConstants.COMUN_MEDIA_DESC.get(idTipoMedia)+" ";
				}
				avviso = "Estrazione automatica "+tipo+"per "+avviso;
				AvvisiBusiness.writeAvviso(avviso, false, ServerConstants.DEFAULT_SYSTEM_USER);
			}
		} catch (DatabaseException e) {
			Logger.get().addHtmlLogLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
		} catch (NumberFormatException e) {
			Logger.get().addHtmlLogLine(idRapporto, "ERROR: "+e.getMessage());
			throw new JobExecutionException(e);
		} finally {
			String titolo = "Report automatico ";
			for (String idTipoMedia:idTipoMediaList) {
				titolo += AppConstants.COMUN_MEDIA_DESC.get(idTipoMedia)+" ";
			}
			titolo += "in coda";
			Logger.get().setLogTitle(idRapporto, titolo);
			try {
				Logger.get().closeAndSaveRapporto(idRapporto);
			} catch (DatabaseException e) {
				throw new JobExecutionException(e);
			}
		}
		LOG.info("Ended job '"+jobCtx.getJobDetail().getKey().getName()+"'");
	}
	
	//private List<EvasioniComunicazioni> findEnqueuedComunicazioniByPeriodico(
	//		Integer idRapporto, Integer idPeriodico, 
	//		boolean extractBol, boolean extractNdd) throws DatabaseException {
	//	Session ses = SessionFactory.getSession();
	//	List<EvasioniComunicazioni> result = null;
	//	try {
	//		result = new EvasioniComunicazioniDao()
	//			.produceEnqueuedComunicazioni(ses,
	//					extractBol,
	//					false, //extractLet,
	//					extractNdd,
	//					false, //EstractEmail,
	//					idPeriodico, idRapporto);
	//	} catch (HibernateException e) {
	//		throw new DatabaseException(e.getMessage(), e);
	//	} finally {
	//		ses.close();
	//	}
	//	return result;
	//}
	
	private void createAndExportReport(Integer idRapporto, List<Bollettino> bolCollection, String nomePeriodico,
			Date date) throws DatabaseException {
		//Hibernate Session
		Session ses = SessionFactory.getSession();
		try {
			//Raggruppa per tipi di report, se necessario
			Map<String, List<Bollettino>> reportFileMap = new HashMap<String, List<Bollettino>>();
			for (Bollettino bol:bolCollection) {
				String key = bol.getReportFilePath();
				List<Bollettino> list = reportFileMap.get(key);
				if (list == null) {
					list = new ArrayList<Bollettino>();
					reportFileMap.put(key, list);
				}
				list.add(bol);
			}
			//Vede quanti tipi di report devono essere stampati e cicla
			Set<String> keySet = reportFileMap.keySet();
			int count = 1;
			for (String key:keySet) {
				List<Bollettino> list = reportFileMap.get(key);
				String descr = nomePeriodico;
				if (keySet.size() > 1) descr += " ("+count+")";
				ReportWork work = new ReportWork(idRapporto, list, descr, date);
				ses.doWork(work);//L'oggetto Work serve ad usare la Connection JDBC restando nella sessione Hibernate
				count++;
			}
		} catch (HibernateException e) {
			throw new DatabaseException(e.getMessage(), e);
		} finally {
			ses.close();
		}
	}
			
	
	
	//Inner classes
	
	
	
	public class ReportWork implements Work {
		
		private Map<String, Object> paramMap = new HashMap<String, Object>();
		private Integer idRapporto = null;
		private String descrPeriodico = null;
		private List<Bollettino> bolCollection = null;
		private Date date = null;
		
		public ReportWork(Integer idRapporto, List<Bollettino> bolCollection, String descrPeriodico, Date date) throws HibernateException {
			this.idRapporto = idRapporto;
			this.descrPeriodico = descrPeriodico;
			this.bolCollection = bolCollection;
			this.date = date;
			Locale locale = new Locale("it", "IT");
			paramMap.put(JRParameter.REPORT_LOCALE, locale);
			paramMap.put("euroImageUrl", AutomationConstants.IMG_EURO);
		}

		@Override
		public void execute(Connection con) throws SQLException {
			File f = null;
			String fileNamePrefix = "";
			for (String idTipoMedia:idTipoMediaList) {
				fileNamePrefix += AppConstants.COMUN_MEDIA_DESC.get(idTipoMedia)+" ";
			}
			try {
				f = File.createTempFile(fileNamePrefix+descrPeriodico, ".pdf");
				f.deleteOnExit();
				String reportFilePath = bolCollection.get(0).getReportFilePath();
				InputStream reportIs = getClass().getResourceAsStream(reportFilePath);
				JRBeanCollectionDataSource jrds = new JRBeanCollectionDataSource(bolCollection);
				JasperPrint print = JasperFillManager.fillReport(reportIs, paramMap, jrds);
				JasperExportManager.exportReportToPdfFile(print, f.getAbsolutePath());
				LOG.info("report file: "+f.getAbsolutePath());
				ReportUtil.exportReportToFtp(idRapporto, f, fileNamePrefix.trim(), descrPeriodico, "pdf", date);
			} catch (IOException e) {
				LOG.error(e.getMessage(), e);
				e.printStackTrace();
				throw new SQLException(e);
			} catch (JRException e) {
				LOG.error(e.getMessage(), e);
				e.printStackTrace();
				throw new SQLException(e);
			}
		}

	}
}
