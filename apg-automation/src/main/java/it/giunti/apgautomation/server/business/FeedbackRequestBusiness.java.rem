package it.giunti.apgautomation.server.jobs.business;

import it.giunti.apg.server.ServerConstants;
import it.giunti.apg.server.VisualLogger;
import it.giunti.apg.server.persistence.FeedbackAnagraficheDao;
import it.giunti.apg.server.persistence.GenericDao;
import it.giunti.apg.server.persistence.IstanzeAbbonamentiDao;
import it.giunti.apg.server.persistence.SessionFactory;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.model.Anagrafiche;
import it.giunti.apg.shared.model.FeedbackAnagrafiche;
import it.giunti.apg.shared.model.IstanzeAbbonamenti;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class FeedbackRequestBusiness {

	static FeedbackAnagraficheDao faDao = new FeedbackAnagraficheDao();
	static IstanzeAbbonamentiDao iaDao = new IstanzeAbbonamentiDao();
	
	public static List<FeedbackAnagrafiche> createFeedbackAnagraficheOnCreation(
			Date fromDay, String testEmailRecipient, boolean test, int idRapporto) 
			throws BusinessException {
		VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione feedback anagrafiche per "+
			"nuovi abbonamenti");
		// Creazione righe DB
		List<FeedbackAnagrafiche> faList = new ArrayList<FeedbackAnagrafiche>();
		Session ses = SessionFactory.getSession();
		Transaction trn = ses.beginTransaction();
		try {
			List<IstanzeAbbonamenti> iaList = iaDao.findIstanzeByMissingCodFiscOnCreation(ses, fromDay);
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Feedback necessari: "+iaList.size());
			for (IstanzeAbbonamenti ia:iaList) {
				//Crea e salva una nuova richiesta feedback
				FeedbackAnagrafiche fa = saveFeedbackAnagraficaIfNonexisting(ses, ia, idRapporto);
				if (fa != null) faList.add(fa);
			}
			trn.commit();
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Feedback da inviare: "+faList.size());
		} catch (NumberFormatException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} catch (HibernateException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} finally {
			ses.close();
		}
		return faList;
	}
	
	/**
	 * Crea le comunicazioni al cliente che devono partire quando un abbonamento passa allo stato di "pagato"
	 * Gli oggetti nella List<EvasioniComunicazioni> sono transienti e quindi non salvati su db.
	 */
	public static List<FeedbackAnagrafiche> createFeedbackAnagraficheOnPayment(
			Date fromDay, String testEmailRecipient, boolean test, int idRapporto)
			throws BusinessException {
		VisualLogger.get().addHtmlInfoLine(idRapporto, "Creazione feedback anagrafiche per "+
				"nuovi pagamenti");
		// Creazione righe DB
		List<FeedbackAnagrafiche> faList = new ArrayList<FeedbackAnagrafiche>();
		Session ses = SessionFactory.getSession();
		Transaction trn = ses.beginTransaction();
		try {
			List<IstanzeAbbonamenti> iaList = iaDao.findIstanzeByMissingCodFiscOnPayment(ses, fromDay);
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Feedback necessari: "+iaList.size());
			for (IstanzeAbbonamenti ia:iaList) {
				//Crea e salva una nuova richiesta feedback
				FeedbackAnagrafiche fa = saveFeedbackAnagraficaIfNonexisting(ses, ia, idRapporto);
				if (fa != null) faList.add(fa);
			}
			trn.commit();
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Feedback da inviare: "+faList.size());
		} catch (NumberFormatException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} catch (HibernateException e) {
			trn.rollback();
			throw new BusinessException(e.getMessage(), e);
		} finally {
			ses.close();
		}
		return faList;
	}
	
	private static FeedbackAnagrafiche saveFeedbackAnagraficaIfNonexisting(Session ses,
			IstanzeAbbonamenti ia, int idRapporto)
			throws BusinessException {
		//creazione
		FeedbackAnagrafiche fa = null;
		if (ia.getPagante() != null) {
			fa = createTransientFeedbackAnagrafica(ia.getPagante());
		} else {
			fa = createTransientFeedbackAnagrafica(ia.getAbbonato());
		}
		try {
			//Verifica se gi√† esiste una richiesta feedback
			FeedbackAnagrafiche testFa = faDao.findByIdAnagrafica(ses, fa.getIdAnagrafica());
			if (testFa == null) {
				Integer id = (Integer) GenericDao.saveGeneric(ses, fa);
				fa = GenericDao.findById(ses, FeedbackAnagrafiche.class, id);
			} else {
				fa = null;
			}
		} catch (HibernateException e) {
			VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage(), e);
			throw new BusinessException(e.getMessage(), e);
		}
		return fa;
	}
	
	private static FeedbackAnagrafiche createTransientFeedbackAnagrafica(Anagrafiche anag) throws BusinessException {
		Date now = new Date();
		FeedbackAnagrafiche fa = new FeedbackAnagrafiche();
		fa.setCap(anag.getIndirizzoPrincipale().getCap());
		fa.setCodiceCliente(anag.getCodiceCliente());
		fa.setCodiceFiscale(anag.getCodiceFiscale());
		fa.setCognomeRagioneSociale(anag.getCognomeRagioneSociale());
		fa.setEmailPrimaria(anag.getEmailPrimaria());
		fa.setIdAnagrafica(anag.getId());
		fa.setIndirizzo(anag.getIndirizzoPrincipale().getIndirizzo());
		fa.setLocalita(anag.getIndirizzoPrincipale().getLocalita());
		fa.setNazione(anag.getIndirizzoPrincipale().getNazione());
		fa.setNome(anag.getNome());
		fa.setPartitaIva(anag.getPartitaIva());
		fa.setPresso(anag.getIndirizzoPrincipale().getPresso());
		fa.setProfessione(anag.getProfessione());
		fa.setProvincia(anag.getIndirizzoPrincipale().getProvincia());
		fa.setSesso(anag.getSesso());
		fa.setTelCasa(anag.getTelCasa());
		fa.setTelMobile(anag.getTelMobile());
		fa.setTitolo(anag.getTitolo());
		fa.setDataCreazione(now);
		
		String urlId = createUrlId(anag.getCognomeRagioneSociale()+ServerConstants.FORMAT_TIMESTAMP.format(now)) +
				createUrlId(anag.getCodiceCliente()+ServerConstants.FORMAT_TIMESTAMP.format(now));
		fa.setUrlId(urlId);
		return fa;
	}
	
	private static String createUrlId(String seed) throws BusinessException {
		String md5;
		try {
			//Create MessageDigest object for MD5
			MessageDigest digest = MessageDigest.getInstance("MD5");
			//Update input string in message digest
			digest.update(seed.getBytes(), 0, seed.length());
			//Converts message digest value in base 16 (hex)
			md5 = new BigInteger(1, digest.digest()).toString(16);
		} catch (NoSuchAlgorithmException e) {
			throw new BusinessException(e.getMessage(), e);
		}
		return md5;
	}
		
}
