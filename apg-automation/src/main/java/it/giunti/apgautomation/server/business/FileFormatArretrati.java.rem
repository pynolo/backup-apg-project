package it.giunti.apgautomation.server.jobs.business;

import it.giunti.apgautomation.server.VisualLogger;
import it.giunti.apgautomation.server.business.FascicoliGroupBean;
import it.giunti.apgautomation.server.business.FileFormatCommon;
import it.giunti.apgautomation.server.business.SortBusiness;
import it.giunti.apgautomation.server.persistence.SessionFactory;
import it.giunti.apgautomation.shared.AppConstants;
import it.giunti.apgautomation.shared.BusinessException;
import it.giunti.apgautomation.shared.FileException;
import it.giunti.apgautomation.shared.model.Anagrafiche;
import it.giunti.apgautomation.shared.model.EvasioniFascicoli;
import it.giunti.apgautomation.shared.model.IstanzeAbbonamenti;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;
import java.util.Locale;

import org.hibernate.HibernateException;
import org.hibernate.Session;

public class FileFormatArretrati {
    
	//private static final Logger LOG = LoggerFactory.getLogger(FileFormatArretrati.class);
	private static int CM_FIELD_LENGTH = 100;
	
	public static void formatArretratiDaSpedire(File file, List<EvasioniFascicoli> efList, int idRapporto) 
			throws BusinessException, FileException {
		Locale.setDefault(Locale.ITALIAN);
		//la lista è in ordine di abbonamento e fascicolo
		String data;
		if (file != null) {
			try {
				//Preparazione file
				FileOutputStream fos = new FileOutputStream(file);
				OutputStreamWriter fileWriter = new OutputStreamWriter(fos, AppConstants.CHARSET);
				//Mappa che raggruppa i fascicoli per id_istanza_abbonamento
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Raggruppamento arretrati per istanza abbonamento");
				List<FascicoliGroupBean> fgList = FascicoliBusiness.groupFascicoliByIstanza(efList, idRapporto);
				//Ordina i FascicoliGroupBean per cap e nazione
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Ordinamento per cap e nazione");
				new SortBusiness().sortFascicoliGroup(fgList);
				//La lista è pronta, ora va scorsa per estrarre tutti i fascicoliGroup
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Formattazione dati");
				Session ses = SessionFactory.getSession();
				try {
					for (FascicoliGroupBean fg:fgList) {
						data=arretratiPerAbbonamentoToBuffer(ses, fg, idRapporto);
						fileWriter.append(data);
					}
				} catch (HibernateException e) {
					VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage(), e);
				} catch (IOException e) {
					VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage(), e);
				} finally {
					ses.close();
				}
				fileWriter.close();
				VisualLogger.get().addHtmlInfoLine(idRapporto, "Scrittura file completa");
			} catch(HibernateException e)	{
				VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage(), e);
				throw new BusinessException(e.getMessage(), e);
			} catch(IOException e)	{
				VisualLogger.get().addHtmlErrorLine(idRapporto, e.getMessage(), e);
				throw new FileException(e.getMessage(), e);
			}
		} else {
			VisualLogger.get().addHtmlInfoLine(idRapporto, "Errore nell'apertura del file");
		}
	}
	
	
	private static String arretratiPerAbbonamentoToBuffer(Session ses, FascicoliGroupBean fg, int idRapporto) 
			throws HibernateException {
		String buffer="";
		IstanzeAbbonamenti ia = fg.getIstanzaAbbonamento();
		Anagrafiche destSpedizione = ia.getAbbonato();
		String abboBuffer = FileFormatCommon.istanzaToBuffer(ia, destSpedizione, null, idRapporto);
		//Crea varie stringhe che descrivono gli intervalli e poi le cicla concatenandoci lo stesso abboBuffer
		List<String> inviiTagLines = FileFormatCommon.findIntervals(fg.getEvasioniFacicoliList(), CM_FIELD_LENGTH, idRapporto);
		//Formato della linea di testo arretrati: 32 caratteri separati da ;
		for (String line : inviiTagLines) {
			buffer=buffer.concat(abboBuffer);
			line = FileFormatCommon.formatString(CM_FIELD_LENGTH, line);
			buffer=buffer.concat(line);
			buffer=buffer.concat("\n");
		}
		return buffer;
	}

}
