
package it.giunti.apg.soap.magnews;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "MagNewsAPI", targetNamespace = "http://webservices.magnews/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface MagNewsAPI {


    /**
     * 
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVersion", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetVersion")
    @ResponseWrapper(localName = "getVersionResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetVersionResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getVersionRequest", output = "http://webservices.magnews/MagNewsAPI/getVersionResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getVersion/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getVersion/Fault/ServiceNotAvailableException")
    })
    public String getVersion()
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param fileOptions
     * @param data
     * @param credentials
     * @param idRowSet
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addDataToContactsRowsSetFromFile", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToContactsRowsSetFromFile")
    @ResponseWrapper(localName = "addDataToContactsRowsSetFromFileResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToContactsRowsSetFromFileResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetFromFileRequest", output = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetFromFileResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetFromFile/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetFromFile/Fault/ServiceNotAvailableException")
    })
    public String addDataToContactsRowsSetFromFile(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "data", targetNamespace = "")
        byte[] data,
        @WebParam(name = "fileOptions", targetNamespace = "")
        FileOptions fileOptions,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idContent
     * @param idNewsletter
     * @param format
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "attachFileToNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AttachFileToNewsletter")
    @ResponseWrapper(localName = "attachFileToNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AttachFileToNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/attachFileToNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/attachFileToNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/attachFileToNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/attachFileToNewsletter/Fault/ServiceNotAvailableException")
    })
    public void attachFileToNewsletter(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "format", targetNamespace = "")
        String format,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param filter
     * @param credentials
     * @param idDatabase
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchFindContactByFilter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByFilter")
    @ResponseWrapper(localName = "batchFindContactByFilterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByFilterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchFindContactByFilterRequest", output = "http://webservices.magnews/MagNewsAPI/batchFindContactByFilterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByFilter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByFilter/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> batchFindContactByFilter(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "filter", targetNamespace = "")
        Filter filter,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param message
     * @param option
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws InvalidMessageException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendEmailMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendEmailMessage")
    @ResponseWrapper(localName = "sendEmailMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendEmailMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendEmailMessageRequest", output = "http://webservices.magnews/MagNewsAPI/sendEmailMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendEmailMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendEmailMessage/Fault/ServiceNotAvailableException"),
        @FaultAction(className = InvalidMessageException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendEmailMessage/Fault/InvalidMessageException")
    })
    public MnSimpleMessageStatus sendEmailMessage(
        @WebParam(name = "message", targetNamespace = "")
        EmailMessage message,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, InvalidMessageException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param idDatabase
     * @param contactPrimaryKeys
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.OnDemandMessage>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSendOnDemandMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendOnDemandMessage")
    @ResponseWrapper(localName = "batchSendOnDemandMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendOnDemandMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSendOnDemandMessageRequest", output = "http://webservices.magnews/MagNewsAPI/batchSendOnDemandMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendOnDemandMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendOnDemandMessage/Fault/ServiceNotAvailableException")
    })
    public List<OnDemandMessage> batchSendOnDemandMessage(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "contactPrimaryKeys", targetNamespace = "")
        List<String> contactPrimaryKeys,
        @WebParam(name = "options", targetNamespace = "")
        List<OnDemandMessageOptions> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param messag
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.SendSimpleMessageOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSendSimpleMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSimpleMessage")
    @ResponseWrapper(localName = "batchSendSimpleMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSimpleMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSendSimpleMessageRequest", output = "http://webservices.magnews/MagNewsAPI/batchSendSimpleMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSimpleMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSimpleMessage/Fault/ServiceNotAvailableException")
    })
    public List<SendSimpleMessageOperation> batchSendSimpleMessage(
        @WebParam(name = "messag", targetNamespace = "")
        List<SendSimpleMessageValues> messag,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessage
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.SendSimpleMessageOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchCancelSimpleMessages", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchCancelSimpleMessages")
    @ResponseWrapper(localName = "batchCancelSimpleMessagesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchCancelSimpleMessagesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchCancelSimpleMessagesRequest", output = "http://webservices.magnews/MagNewsAPI/batchCancelSimpleMessagesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchCancelSimpleMessages/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchCancelSimpleMessages/Fault/ServiceNotAvailableException")
    })
    public List<SendSimpleMessageOperation> batchCancelSimpleMessages(
        @WebParam(name = "idMessage", targetNamespace = "")
        List<String> idMessage,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param message
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.BatchEmailMessageOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws InvalidMessageException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSendEmailMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendEmailMessage")
    @ResponseWrapper(localName = "batchSendEmailMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendEmailMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSendEmailMessageRequest", output = "http://webservices.magnews/MagNewsAPI/batchSendEmailMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendEmailMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendEmailMessage/Fault/ServiceNotAvailableException"),
        @FaultAction(className = InvalidMessageException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendEmailMessage/Fault/InvalidMessageException")
    })
    public List<BatchEmailMessageOperation> batchSendEmailMessage(
        @WebParam(name = "message", targetNamespace = "")
        List<BatchEmailMessage> message,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, InvalidMessageException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param message
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.BatchSmsMessageOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws InvalidMessageException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSendSmsMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSmsMessage")
    @ResponseWrapper(localName = "batchSendSmsMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSmsMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSendSmsMessageRequest", output = "http://webservices.magnews/MagNewsAPI/batchSendSmsMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSmsMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSmsMessage/Fault/ServiceNotAvailableException"),
        @FaultAction(className = InvalidMessageException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSmsMessage/Fault/InvalidMessageException")
    })
    public List<BatchSmsMessageOperation> batchSendSmsMessage(
        @WebParam(name = "message", targetNamespace = "")
        List<BatchSmsMessage> message,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, InvalidMessageException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param message
     * @param option
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws InvalidMessageException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendSmsMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSmsMessage")
    @ResponseWrapper(localName = "sendSmsMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSmsMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendSmsMessageRequest", output = "http://webservices.magnews/MagNewsAPI/sendSmsMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSmsMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSmsMessage/Fault/ServiceNotAvailableException"),
        @FaultAction(className = InvalidMessageException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSmsMessage/Fault/InvalidMessageException")
    })
    public MnSimpleMessageStatus sendSmsMessage(
        @WebParam(name = "message", targetNamespace = "")
        SmsMessage message,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, InvalidMessageException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param message
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.SendSingleNewsletterOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSendSingleNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSingleNewsletter")
    @ResponseWrapper(localName = "batchSendSingleNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSendSingleNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSendSingleNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/batchSendSingleNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSingleNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSendSingleNewsletter/Fault/ServiceNotAvailableException")
    })
    public List<SendSingleNewsletterOperation> batchSendSingleNewsletter(
        @WebParam(name = "message", targetNamespace = "")
        List<SendSingleNewsletterValues> message,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idSubscriptionCause
     * @param idDatabase
     * @param primaryKeyValues
     * @param idList
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSubscribeContactToList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSubscribeContactToList")
    @ResponseWrapper(localName = "batchSubscribeContactToListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchSubscribeContactToListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchSubscribeContactToListRequest", output = "http://webservices.magnews/MagNewsAPI/batchSubscribeContactToListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSubscribeContactToList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchSubscribeContactToList/Fault/ServiceNotAvailableException")
    })
    public List<MnContactOperation> batchSubscribeContactToList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValues", targetNamespace = "")
        List<String> primaryKeyValues,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "idSubscriptionCause", targetNamespace = "")
        String idSubscriptionCause,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idUnsubscriptionCause
     * @param credentials
     * @param idDatabase
     * @param primaryKeyValues
     * @param idList
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchUnsubscribeContactFromList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchUnsubscribeContactFromList")
    @ResponseWrapper(localName = "batchUnsubscribeContactFromListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchUnsubscribeContactFromListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchUnsubscribeContactFromListRequest", output = "http://webservices.magnews/MagNewsAPI/batchUnsubscribeContactFromListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchUnsubscribeContactFromList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchUnsubscribeContactFromList/Fault/ServiceNotAvailableException")
    })
    public List<MnContactOperation> batchUnsubscribeContactFromList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValues", targetNamespace = "")
        List<String> primaryKeyValues,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "idUnsubscriptionCause", targetNamespace = "")
        String idUnsubscriptionCause,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactReport
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "calculateContactReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CalculateContactReport")
    @ResponseWrapper(localName = "calculateContactReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CalculateContactReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/calculateContactReportRequest", output = "http://webservices.magnews/MagNewsAPI/calculateContactReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/calculateContactReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/calculateContactReport/Fault/ServiceNotAvailableException")
    })
    public MnContactReport calculateContactReport(
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param appId
     * @param clientInfo
     * @param operationName
     * @param parameters
     * @param authInfo
     * @return
     *     returns it.giunti.apg.soap.magnews.ApplicationResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "callApplication", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CallApplication")
    @ResponseWrapper(localName = "callApplicationResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CallApplicationResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/callApplicationRequest", output = "http://webservices.magnews/MagNewsAPI/callApplicationResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/callApplication/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/callApplication/Fault/ServiceNotAvailableException")
    })
    public ApplicationResult callApplication(
        @WebParam(name = "authInfo", targetNamespace = "")
        AuthInfo authInfo,
        @WebParam(name = "clientInfo", targetNamespace = "")
        ClientInfo clientInfo,
        @WebParam(name = "appId", targetNamespace = "")
        String appId,
        @WebParam(name = "operationName", targetNamespace = "")
        String operationName,
        @WebParam(name = "parameters", targetNamespace = "")
        ApplicationParameters parameters)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContactRowSet", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContactRowSet")
    @ResponseWrapper(localName = "createContactRowSetResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContactRowSetResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createContactRowSetRequest", output = "http://webservices.magnews/MagNewsAPI/createContactRowSetResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContactRowSet/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContactRowSet/Fault/ServiceNotAvailableException")
    })
    public String createContactRowSet(
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCustomDataRowSet", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCustomDataRowSet")
    @ResponseWrapper(localName = "createCustomDataRowSetResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCustomDataRowSetResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createCustomDataRowSetRequest", output = "http://webservices.magnews/MagNewsAPI/createCustomDataRowSetResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCustomDataRowSet/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCustomDataRowSet/Fault/ServiceNotAvailableException")
    })
    public String createCustomDataRowSet(
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param fileOptions
     * @param data
     * @param credentials
     * @param idRowSet
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addDataToCustomDataRowsSetFromFile", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToCustomDataRowsSetFromFile")
    @ResponseWrapper(localName = "addDataToCustomDataRowsSetFromFileResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToCustomDataRowsSetFromFileResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/addDataToCustomDataRowsSetFromFileRequest", output = "http://webservices.magnews/MagNewsAPI/addDataToCustomDataRowsSetFromFileResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToCustomDataRowsSetFromFile/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToCustomDataRowsSetFromFile/Fault/ServiceNotAvailableException")
    })
    public String addDataToCustomDataRowsSetFromFile(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "data", targetNamespace = "")
        byte[] data,
        @WebParam(name = "fileOptions", targetNamespace = "")
        FileOptions fileOptions,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param advancedOptions
     * @param idRowSet
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "startBatchCustomTableUpdate", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.StartBatchCustomTableUpdate")
    @ResponseWrapper(localName = "startBatchCustomTableUpdateResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.StartBatchCustomTableUpdateResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/startBatchCustomTableUpdateRequest", output = "http://webservices.magnews/MagNewsAPI/startBatchCustomTableUpdateResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/startBatchCustomTableUpdate/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/startBatchCustomTableUpdate/Fault/ServiceNotAvailableException")
    })
    public String startBatchCustomTableUpdate(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "options", targetNamespace = "")
        MnCustomDataBatchStartOptions options,
        @WebParam(name = "advancedOptions", targetNamespace = "")
        List<Option> advancedOptions,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idBatch
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cancelBatch", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CancelBatch")
    @ResponseWrapper(localName = "cancelBatchResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CancelBatchResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/cancelBatchRequest", output = "http://webservices.magnews/MagNewsAPI/cancelBatchResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/cancelBatch/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/cancelBatch/Fault/ServiceNotAvailableException")
    })
    public void cancelBatch(
        @WebParam(name = "idBatch", targetNamespace = "")
        String idBatch,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param data
     * @param credentials
     * @param idRowSet
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addDataToContactsRowsSet", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToContactsRowsSet")
    @ResponseWrapper(localName = "addDataToContactsRowsSetResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.AddDataToContactsRowsSetResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetRequest", output = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSetResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSet/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/addDataToContactsRowsSet/Fault/ServiceNotAvailableException")
    })
    public String addDataToContactsRowsSet(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "data", targetNamespace = "")
        List<RawContactData> data,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param media
     * @return
     *     returns it.giunti.apg.soap.magnews.Media
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "uploadMedia", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UploadMedia")
    @ResponseWrapper(localName = "uploadMediaResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UploadMediaResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/uploadMediaRequest", output = "http://webservices.magnews/MagNewsAPI/uploadMediaResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/uploadMedia/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/uploadMedia/Fault/ServiceNotAvailableException")
    })
    public Media uploadMedia(
        @WebParam(name = "media", targetNamespace = "")
        Media media,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param idmedia
     * @return
     *     returns it.giunti.apg.soap.magnews.Media
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadMedia", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadMedia")
    @ResponseWrapper(localName = "downloadMediaResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadMediaResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/downloadMediaRequest", output = "http://webservices.magnews/MagNewsAPI/downloadMediaResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadMedia/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadMedia/Fault/ServiceNotAvailableException")
    })
    public Media downloadMedia(
        @WebParam(name = "idmedia", targetNamespace = "")
        String idmedia,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param name
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.Media
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findMediaByName", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindMediaByName")
    @ResponseWrapper(localName = "findMediaByNameResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindMediaByNameResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findMediaByNameRequest", output = "http://webservices.magnews/MagNewsAPI/findMediaByNameResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findMediaByName/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findMediaByName/Fault/ServiceNotAvailableException")
    })
    public Media findMediaByName(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param template
     * @param credentials
     * @param name
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCustomContentType", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCustomContentType")
    @ResponseWrapper(localName = "createCustomContentTypeResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCustomContentTypeResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createCustomContentTypeRequest", output = "http://webservices.magnews/MagNewsAPI/createCustomContentTypeResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCustomContentType/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCustomContentType/Fault/ServiceNotAvailableException")
    })
    public String createCustomContentType(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "template", targetNamespace = "")
        String template,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param fieldOptions
     * @param dataType
     * @param idDatabase
     * @param name
     * @param subDataType
     * @param options
     * @param label
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createField", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateField")
    @ResponseWrapper(localName = "createFieldResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateFieldResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createFieldRequest", output = "http://webservices.magnews/MagNewsAPI/createFieldResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createField/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createField/Fault/ServiceNotAvailableException")
    })
    public String createField(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "label", targetNamespace = "")
        String label,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "dataType", targetNamespace = "")
        String dataType,
        @WebParam(name = "subDataType", targetNamespace = "")
        String subDataType,
        @WebParam(name = "fieldOptions", targetNamespace = "")
        MnFieldOptions fieldOptions,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @param content
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateNewsletter")
    @ResponseWrapper(localName = "updateNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/updateNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateNewsletter/Fault/ServiceNotAvailableException")
    })
    public void updateNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "content", targetNamespace = "")
        Content content,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param groupName
     * @param credentials
     * @param idDatabase
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleStaticGroup", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleStaticGroup")
    @ResponseWrapper(localName = "createSimpleStaticGroupResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleStaticGroupResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleStaticGroupRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleStaticGroupResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleStaticGroup/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleStaticGroup/Fault/ServiceNotAvailableException")
    })
    public String createSimpleStaticGroup(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param idDatabase
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createStaticGroupFromQuery", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateStaticGroupFromQuery")
    @ResponseWrapper(localName = "createStaticGroupFromQueryResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateStaticGroupFromQueryResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromQueryRequest", output = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromQueryResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromQuery/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromQuery/Fault/ServiceNotAvailableException")
    })
    public String createStaticGroupFromQuery(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param idDatabase
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createDynamicGroupFromQuery", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateDynamicGroupFromQuery")
    @ResponseWrapper(localName = "createDynamicGroupFromQueryResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateDynamicGroupFromQueryResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createDynamicGroupFromQueryRequest", output = "http://webservices.magnews/MagNewsAPI/createDynamicGroupFromQueryResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createDynamicGroupFromQuery/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createDynamicGroupFromQuery/Fault/ServiceNotAvailableException")
    })
    public String createDynamicGroupFromQuery(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createStaticGroupFromNewsletterTarget", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateStaticGroupFromNewsletterTarget")
    @ResponseWrapper(localName = "createStaticGroupFromNewsletterTargetResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateStaticGroupFromNewsletterTargetResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromNewsletterTargetRequest", output = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromNewsletterTargetResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromNewsletterTarget/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createStaticGroupFromNewsletterTarget/Fault/ServiceNotAvailableException")
    })
    public String createStaticGroupFromNewsletterTarget(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param name
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleList")
    @ResponseWrapper(localName = "createSimpleListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleListRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleList/Fault/ServiceNotAvailableException")
    })
    public String createSimpleList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param name
     * @param options
     * @param idWebsite
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleSurvey", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleSurvey")
    @ResponseWrapper(localName = "createSimpleSurveyResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleSurveyResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleSurveyRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleSurveyResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleSurvey/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleSurvey/Fault/ServiceNotAvailableException")
    })
    public String createSimpleSurvey(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "idWebsite", targetNamespace = "")
        String idWebsite,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param idCustomContentType
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteCustomContentType", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteCustomContentType")
    @ResponseWrapper(localName = "deleteCustomContentTypeResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteCustomContentTypeResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/deleteCustomContentTypeRequest", output = "http://webservices.magnews/MagNewsAPI/deleteCustomContentTypeResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteCustomContentType/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteCustomContentType/Fault/ServiceNotAvailableException")
    })
    public String deleteCustomContentType(
        @WebParam(name = "idCustomContentType", targetNamespace = "")
        String idCustomContentType,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idRowSet
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "destroyRowSetInfo", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DestroyRowSetInfo")
    @ResponseWrapper(localName = "destroyRowSetInfoResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DestroyRowSetInfoResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/destroyRowSetInfoRequest", output = "http://webservices.magnews/MagNewsAPI/destroyRowSetInfoResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/destroyRowSetInfo/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/destroyRowSetInfo/Fault/ServiceNotAvailableException")
    })
    public void destroyRowSetInfo(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idContent
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.Content
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadContent", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadContent")
    @ResponseWrapper(localName = "downloadContentResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadContentResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/downloadContentRequest", output = "http://webservices.magnews/MagNewsAPI/downloadContentResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadContent/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadContent/Fault/ServiceNotAvailableException")
    })
    public Content downloadContent(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param ipaddress
     * @param idContact
     * @param idSurveySession
     * @param credentials
     * @param options
     * @param idPage
     * @param parameters
     * @param securityCheck
     * @return
     *     returns it.giunti.apg.soap.magnews.MnFormSubmissionResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeFormSubmission", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteFormSubmission")
    @ResponseWrapper(localName = "executeFormSubmissionResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteFormSubmissionResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/executeFormSubmissionRequest", output = "http://webservices.magnews/MagNewsAPI/executeFormSubmissionResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeFormSubmission/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeFormSubmission/Fault/ServiceNotAvailableException")
    })
    public MnFormSubmissionResult executeFormSubmission(
        @WebParam(name = "idPage", targetNamespace = "")
        String idPage,
        @WebParam(name = "parameters", targetNamespace = "")
        List<FieldValue> parameters,
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "securityCheck", targetNamespace = "")
        String securityCheck,
        @WebParam(name = "ipaddress", targetNamespace = "")
        String ipaddress,
        @WebParam(name = "idSurveySession", targetNamespace = "")
        String idSurveySession,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchBatchContactsUpdateReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchBatchContactsUpdateReport")
    @ResponseWrapper(localName = "fetchBatchContactsUpdateReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchBatchContactsUpdateReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchBatchContactsUpdateReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchBatchContactsUpdateReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchBatchContactsUpdateReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchBatchContactsUpdateReport/Fault/ServiceNotAvailableException")
    })
    public List<MnContactOperation> fetchBatchContactsUpdateReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnCustomDataMergeOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchBatchCustomDataUpdateReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchBatchCustomDataUpdateReport")
    @ResponseWrapper(localName = "fetchBatchCustomDataUpdateReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchBatchCustomDataUpdateReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchBatchCustomDataUpdateReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchBatchCustomDataUpdateReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchBatchCustomDataUpdateReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchBatchCustomDataUpdateReport/Fault/ServiceNotAvailableException")
    })
    public List<MnCustomDataMergeOperation> fetchBatchCustomDataUpdateReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchContacts", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchContacts")
    @ResponseWrapper(localName = "fetchContactsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchContactsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchContactsRequest", output = "http://webservices.magnews/MagNewsAPI/fetchContactsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchContacts/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchContacts/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> fetchContacts(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactReport>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchContactsReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchContactsReport")
    @ResponseWrapper(localName = "fetchContactsReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchContactsReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchContactsReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchContactsReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchContactsReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchContactsReport/Fault/ServiceNotAvailableException")
    })
    public List<MnContactReport> fetchContactsReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDeliveryStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchDeliveryStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDeliveryStatus")
    @ResponseWrapper(localName = "fetchDeliveryStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDeliveryStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchDeliveryStatusRequest", output = "http://webservices.magnews/MagNewsAPI/fetchDeliveryStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDeliveryStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDeliveryStatus/Fault/ServiceNotAvailableException")
    })
    public List<MnDeliveryStatus> fetchDeliveryStatus(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactNewsletterReport>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchDetailedContactReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedContactReport")
    @ResponseWrapper(localName = "fetchDetailedContactReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedContactReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactReport/Fault/ServiceNotAvailableException")
    })
    public List<MnContactNewsletterReport> fetchDetailedContactReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactNewsletterSMSReport>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchDetailedContactSMSReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedContactSMSReport")
    @ResponseWrapper(localName = "fetchDetailedContactSMSReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedContactSMSReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactSMSReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactSMSReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactSMSReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedContactSMSReport/Fault/ServiceNotAvailableException")
    })
    public List<MnContactNewsletterSMSReport> fetchDetailedContactSMSReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactNewsletterReport>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchDetailedNewsletterReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedNewsletterReport")
    @ResponseWrapper(localName = "fetchDetailedNewsletterReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchDetailedNewsletterReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchDetailedNewsletterReportRequest", output = "http://webservices.magnews/MagNewsAPI/fetchDetailedNewsletterReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedNewsletterReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchDetailedNewsletterReport/Fault/ServiceNotAvailableException")
    })
    public List<MnContactNewsletterReport> fetchDetailedNewsletterReport(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnFormSubmission>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchFormSubmissions", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchFormSubmissions")
    @ResponseWrapper(localName = "fetchFormSubmissionsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchFormSubmissionsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchFormSubmissionsRequest", output = "http://webservices.magnews/MagNewsAPI/fetchFormSubmissionsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchFormSubmissions/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchFormSubmissions/Fault/ServiceNotAvailableException")
    })
    public List<MnFormSubmission> fetchFormSubmissions(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnNewsletter>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchNewsletters", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchNewsletters")
    @ResponseWrapper(localName = "fetchNewslettersResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchNewslettersResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchNewslettersRequest", output = "http://webservices.magnews/MagNewsAPI/fetchNewslettersResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchNewsletters/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchNewsletters/Fault/ServiceNotAvailableException")
    })
    public List<MnNewsletter> fetchNewsletters(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param toIndex
     * @param credentials
     * @param idRowSet
     * @param fromIndex
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSurveySession>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchSurveySessions", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchSurveySessions")
    @ResponseWrapper(localName = "fetchSurveySessionsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FetchSurveySessionsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fetchSurveySessionsRequest", output = "http://webservices.magnews/MagNewsAPI/fetchSurveySessionsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchSurveySessions/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fetchSurveySessions/Fault/ServiceNotAvailableException")
    })
    public List<MnSurveySession> fetchSurveySessions(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "fromIndex", targetNamespace = "")
        int fromIndex,
        @WebParam(name = "toIndex", targetNamespace = "")
        int toIndex,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param idList
     * @param primaryKeyValue
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactListSubscriptionInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findContactListSubscriptionToList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactListSubscriptionToList")
    @ResponseWrapper(localName = "findContactListSubscriptionToListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactListSubscriptionToListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findContactListSubscriptionToListRequest", output = "http://webservices.magnews/MagNewsAPI/findContactListSubscriptionToListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactListSubscriptionToList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactListSubscriptionToList/Fault/ServiceNotAvailableException")
    })
    public MnContactListSubscriptionInfo findContactListSubscriptionToList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValue", targetNamespace = "")
        String primaryKeyValue,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idCustomContentType
     * @return
     *     returns it.giunti.apg.soap.magnews.MnCustomContentType
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findCustomContentTypeById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindCustomContentTypeById")
    @ResponseWrapper(localName = "findCustomContentTypeByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindCustomContentTypeByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findCustomContentTypeByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findCustomContentTypeByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findCustomContentTypeById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findCustomContentTypeById/Fault/ServiceNotAvailableException")
    })
    public MnCustomContentType findCustomContentTypeById(
        @WebParam(name = "idCustomContentType", targetNamespace = "")
        String idCustomContentType,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idContacts
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchFindContactById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactById")
    @ResponseWrapper(localName = "batchFindContactByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchFindContactByIdRequest", output = "http://webservices.magnews/MagNewsAPI/batchFindContactByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactById/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> batchFindContactById(
        @WebParam(name = "idContacts", targetNamespace = "")
        List<String> idContacts,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param primaryKeyValues
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchFindContactByPrimaryKey", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByPrimaryKey")
    @ResponseWrapper(localName = "batchFindContactByPrimaryKeyResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByPrimaryKeyResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyRequest", output = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKey/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKey/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> batchFindContactByPrimaryKey(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValues", targetNamespace = "")
        List<String> primaryKeyValues,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param options
     * @param primaryKeyValues
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchFindContactByPrimaryKeyEx", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByPrimaryKeyEx")
    @ResponseWrapper(localName = "batchFindContactByPrimaryKeyExResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactByPrimaryKeyExResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyExRequest", output = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyExResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyEx/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactByPrimaryKeyEx/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> batchFindContactByPrimaryKeyEx(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValues", targetNamespace = "")
        List<String> primaryKeyValues,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param primaryKeyValues
     * @param idList
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactListSubscriptionInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchFindContactListSubscriptionToList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactListSubscriptionToList")
    @ResponseWrapper(localName = "batchFindContactListSubscriptionToListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchFindContactListSubscriptionToListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchFindContactListSubscriptionToListRequest", output = "http://webservices.magnews/MagNewsAPI/batchFindContactListSubscriptionToListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactListSubscriptionToList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchFindContactListSubscriptionToList/Fault/ServiceNotAvailableException")
    })
    public List<MnContactListSubscriptionInfo> batchFindContactListSubscriptionToList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValues", targetNamespace = "")
        List<String> primaryKeyValues,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idLaunch
     * @param options
     * @param idMessages
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnMessageStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchGetMessageStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetMessageStatus")
    @ResponseWrapper(localName = "batchGetMessageStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetMessageStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchGetMessageStatusRequest", output = "http://webservices.magnews/MagNewsAPI/batchGetMessageStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetMessageStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetMessageStatus/Fault/ServiceNotAvailableException")
    })
    public List<MnMessageStatus> batchGetMessageStatus(
        @WebParam(name = "idLaunch", targetNamespace = "")
        String idLaunch,
        @WebParam(name = "idMessages", targetNamespace = "")
        List<String> idMessages,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessages
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSimpleMessageStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchGetSimpleMessageStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetSimpleMessageStatus")
    @ResponseWrapper(localName = "batchGetSimpleMessageStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetSimpleMessageStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusRequest", output = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatus/Fault/ServiceNotAvailableException")
    })
    public List<MnSimpleMessageStatus> batchGetSimpleMessageStatus(
        @WebParam(name = "idMessages", targetNamespace = "")
        List<String> idMessages,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param externalId
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSimpleMessageStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchGetSimpleMessageStatusByExternalId", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetSimpleMessageStatusByExternalId")
    @ResponseWrapper(localName = "batchGetSimpleMessageStatusByExternalIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchGetSimpleMessageStatusByExternalIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusByExternalIdRequest", output = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusByExternalIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusByExternalId/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchGetSimpleMessageStatusByExternalId/Fault/ServiceNotAvailableException")
    })
    public List<MnSimpleMessageStatus> batchGetSimpleMessageStatusByExternalId(
        @WebParam(name = "externalId", targetNamespace = "")
        List<String> externalId,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param mergeOptions
     * @param values
     * @param idNewsletter
     * @param idDatabase
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MergeAndSendOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchMergeContactAndSendOnDemandMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchMergeContactAndSendOnDemandMessage")
    @ResponseWrapper(localName = "batchMergeContactAndSendOnDemandMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchMergeContactAndSendOnDemandMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchMergeContactAndSendOnDemandMessageRequest", output = "http://webservices.magnews/MagNewsAPI/batchMergeContactAndSendOnDemandMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchMergeContactAndSendOnDemandMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchMergeContactAndSendOnDemandMessage/Fault/ServiceNotAvailableException")
    })
    public List<MergeAndSendOperation> batchMergeContactAndSendOnDemandMessage(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<BatchMergeValues> values,
        @WebParam(name = "mergeOptions", targetNamespace = "")
        List<Option> mergeOptions,
        @WebParam(name = "options", targetNamespace = "")
        List<OnDemandMessageOptions> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param name
     * @return
     *     returns it.giunti.apg.soap.magnews.MnFieldInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findFieldByName", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindFieldByName")
    @ResponseWrapper(localName = "findFieldByNameResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindFieldByNameResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findFieldByNameRequest", output = "http://webservices.magnews/MagNewsAPI/findFieldByNameResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findFieldByName/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findFieldByName/Fault/ServiceNotAvailableException")
    })
    public MnFieldInfo findFieldByName(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param idList
     * @return
     *     returns it.giunti.apg.soap.magnews.MnList
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findListById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindListById")
    @ResponseWrapper(localName = "findListByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindListByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findListByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findListByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findListById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findListById/Fault/ServiceNotAvailableException")
    })
    public MnList findListById(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDeliveryStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveDeliveryStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetActiveDeliveryStatus")
    @ResponseWrapper(localName = "getActiveDeliveryStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetActiveDeliveryStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getActiveDeliveryStatusRequest", output = "http://webservices.magnews/MagNewsAPI/getActiveDeliveryStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getActiveDeliveryStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getActiveDeliveryStatus/Fault/ServiceNotAvailableException")
    })
    public List<MnDeliveryStatus> getActiveDeliveryStatus(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContentTag>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllContentTags", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllContentTags")
    @ResponseWrapper(localName = "getAllContentTagsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllContentTagsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllContentTagsRequest", output = "http://webservices.magnews/MagNewsAPI/getAllContentTagsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllContentTags/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllContentTags/Fault/ServiceNotAvailableException")
    })
    public List<MnContentTag> getAllContentTags(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnWebDomain>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllWebDomains", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllWebDomains")
    @ResponseWrapper(localName = "getAllWebDomainsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllWebDomainsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllWebDomainsRequest", output = "http://webservices.magnews/MagNewsAPI/getAllWebDomainsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllWebDomains/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllWebDomains/Fault/ServiceNotAvailableException")
    })
    public List<MnWebDomain> getAllWebDomains(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idPage
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnFormField>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllFieldsInPage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllFieldsInPage")
    @ResponseWrapper(localName = "getAllFieldsInPageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllFieldsInPageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllFieldsInPageRequest", output = "http://webservices.magnews/MagNewsAPI/getAllFieldsInPageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllFieldsInPage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllFieldsInPage/Fault/ServiceNotAvailableException")
    })
    public List<MnFormField> getAllFieldsInPage(
        @WebParam(name = "idPage", targetNamespace = "")
        String idPage,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idSurvey
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnFormField>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllFieldsInSurvey", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllFieldsInSurvey")
    @ResponseWrapper(localName = "getAllFieldsInSurveyResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllFieldsInSurveyResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllFieldsInSurveyRequest", output = "http://webservices.magnews/MagNewsAPI/getAllFieldsInSurveyResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllFieldsInSurvey/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllFieldsInSurvey/Fault/ServiceNotAvailableException")
    })
    public List<MnFormField> getAllFieldsInSurvey(
        @WebParam(name = "idSurvey", targetNamespace = "")
        String idSurvey,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idWebsite
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSurvey>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSurveys", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSurveys")
    @ResponseWrapper(localName = "getAllSurveysResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSurveysResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllSurveysRequest", output = "http://webservices.magnews/MagNewsAPI/getAllSurveysResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSurveys/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSurveys/Fault/ServiceNotAvailableException")
    })
    public List<MnSurvey> getAllSurveys(
        @WebParam(name = "idWebsite", targetNamespace = "")
        String idWebsite,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnWebSite>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllWebSites", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllWebSites")
    @ResponseWrapper(localName = "getAllWebSitesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllWebSitesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllWebSitesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllWebSitesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllWebSites/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllWebSites/Fault/ServiceNotAvailableException")
    })
    public List<MnWebSite> getAllWebSites(
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @return
     *     returns it.giunti.apg.soap.magnews.MnDatabaseReport
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBasicDatabaseReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBasicDatabaseReport")
    @ResponseWrapper(localName = "getBasicDatabaseReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBasicDatabaseReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getBasicDatabaseReportRequest", output = "http://webservices.magnews/MagNewsAPI/getBasicDatabaseReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBasicDatabaseReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBasicDatabaseReport/Fault/ServiceNotAvailableException")
    })
    public MnDatabaseReport getBasicDatabaseReport(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @return
     *     returns it.giunti.apg.soap.magnews.MnNewsletterReport
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBasicNewsletterReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBasicNewsletterReport")
    @ResponseWrapper(localName = "getBasicNewsletterReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBasicNewsletterReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getBasicNewsletterReportRequest", output = "http://webservices.magnews/MagNewsAPI/getBasicNewsletterReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBasicNewsletterReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBasicNewsletterReport/Fault/ServiceNotAvailableException")
    })
    public MnNewsletterReport getBasicNewsletterReport(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnNewsletterReport
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNewsletterReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterReport")
    @ResponseWrapper(localName = "getNewsletterReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getNewsletterReportRequest", output = "http://webservices.magnews/MagNewsAPI/getNewsletterReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterReport/Fault/ServiceNotAvailableException")
    })
    public MnNewsletterReport getNewsletterReport(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idBatch
     * @return
     *     returns it.giunti.apg.soap.magnews.MnBatchStatusInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBatchStatusInfo", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBatchStatusInfo")
    @ResponseWrapper(localName = "getBatchStatusInfoResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetBatchStatusInfoResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getBatchStatusInfoRequest", output = "http://webservices.magnews/MagNewsAPI/getBatchStatusInfoResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBatchStatusInfo/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getBatchStatusInfo/Fault/ServiceNotAvailableException")
    })
    public MnBatchStatusInfo getBatchStatusInfo(
        @WebParam(name = "idBatch", targetNamespace = "")
        String idBatch,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDeliveryStatus
     * @return
     *     returns it.giunti.apg.soap.magnews.MnDeliveryStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDeliveryStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetDeliveryStatus")
    @ResponseWrapper(localName = "getDeliveryStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetDeliveryStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusRequest", output = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getDeliveryStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getDeliveryStatus/Fault/ServiceNotAvailableException")
    })
    public MnDeliveryStatus getDeliveryStatus(
        @WebParam(name = "idDeliveryStatus", targetNamespace = "")
        String idDeliveryStatus,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDeliveryStatus>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDeliveryStatusForNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetDeliveryStatusForNewsletter")
    @ResponseWrapper(localName = "getDeliveryStatusForNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetDeliveryStatusForNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusForNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusForNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusForNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getDeliveryStatusForNewsletter/Fault/ServiceNotAvailableException")
    })
    public List<MnDeliveryStatus> getDeliveryStatusForNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnFieldInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFieldsByDatabase", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetFieldsByDatabase")
    @ResponseWrapper(localName = "getFieldsByDatabaseResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetFieldsByDatabaseResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getFieldsByDatabaseRequest", output = "http://webservices.magnews/MagNewsAPI/getFieldsByDatabaseResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getFieldsByDatabase/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getFieldsByDatabase/Fault/ServiceNotAvailableException")
    })
    public List<MnFieldInfo> getFieldsByDatabase(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnGroupInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGroupsByDatabase", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetGroupsByDatabase")
    @ResponseWrapper(localName = "getGroupsByDatabaseResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetGroupsByDatabaseResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getGroupsByDatabaseRequest", output = "http://webservices.magnews/MagNewsAPI/getGroupsByDatabaseResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getGroupsByDatabase/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getGroupsByDatabase/Fault/ServiceNotAvailableException")
    })
    public List<MnGroupInfo> getGroupsByDatabase(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnList>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListsByDatabase", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetListsByDatabase")
    @ResponseWrapper(localName = "getListsByDatabaseResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetListsByDatabaseResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getListsByDatabaseRequest", output = "http://webservices.magnews/MagNewsAPI/getListsByDatabaseResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getListsByDatabase/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getListsByDatabase/Fault/ServiceNotAvailableException")
    })
    public List<MnList> getListsByDatabase(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idLaunch
     * @param idMessage
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnMessageStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMessageStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetMessageStatus")
    @ResponseWrapper(localName = "getMessageStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetMessageStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getMessageStatusRequest", output = "http://webservices.magnews/MagNewsAPI/getMessageStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getMessageStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getMessageStatus/Fault/ServiceNotAvailableException")
    })
    public MnMessageStatus getMessageStatus(
        @WebParam(name = "idLaunch", targetNamespace = "")
        String idLaunch,
        @WebParam(name = "idMessage", targetNamespace = "")
        String idMessage,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnNewsletterDetails
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNewsletterDetails", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterDetails")
    @ResponseWrapper(localName = "getNewsletterDetailsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterDetailsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getNewsletterDetailsRequest", output = "http://webservices.magnews/MagNewsAPI/getNewsletterDetailsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterDetails/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterDetails/Fault/ServiceNotAvailableException")
    })
    public MnNewsletterDetails getNewsletterDetails(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNewsletterWebVersionLink", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterWebVersionLink")
    @ResponseWrapper(localName = "getNewsletterWebVersionLinkResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetNewsletterWebVersionLinkResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getNewsletterWebVersionLinkRequest", output = "http://webservices.magnews/MagNewsAPI/getNewsletterWebVersionLinkResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterWebVersionLink/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getNewsletterWebVersionLink/Fault/ServiceNotAvailableException")
    })
    public String getNewsletterWebVersionLink(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idRowSet
     * @return
     *     returns it.giunti.apg.soap.magnews.MnRowSetInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRowSetInfo", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetRowSetInfo")
    @ResponseWrapper(localName = "getRowSetInfoResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetRowSetInfoResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getRowSetInfoRequest", output = "http://webservices.magnews/MagNewsAPI/getRowSetInfoResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getRowSetInfo/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getRowSetInfo/Fault/ServiceNotAvailableException")
    })
    public MnRowSetInfo getRowSetInfo(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessage
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSimpleMessageStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageStatus")
    @ResponseWrapper(localName = "getSimpleMessageStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getSimpleMessageStatusRequest", output = "http://webservices.magnews/MagNewsAPI/getSimpleMessageStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageStatus/Fault/ServiceNotAvailableException")
    })
    public MnSimpleMessageStatus getSimpleMessageStatus(
        @WebParam(name = "idMessage", targetNamespace = "")
        String idMessage,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idWebPage
     * @param idContact
     * @param credentials
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWebPageLink", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetWebPageLink")
    @ResponseWrapper(localName = "getWebPageLinkResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetWebPageLinkResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getWebPageLinkRequest", output = "http://webservices.magnews/MagNewsAPI/getWebPageLinkResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getWebPageLink/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getWebPageLink/Fault/ServiceNotAvailableException")
    })
    public String getWebPageLink(
        @WebParam(name = "idWebPage", targetNamespace = "")
        String idWebPage,
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param path
     * @param data
     * @param credentials
     * @param schemename
     * @param idNewsletter
     * @param options
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "fillNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FillNewsletter")
    @ResponseWrapper(localName = "fillNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FillNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/fillNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/fillNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fillNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/fillNewsletter/Fault/ServiceNotAvailableException")
    })
    public void fillNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "path", targetNamespace = "")
        String path,
        @WebParam(name = "schemename", targetNamespace = "")
        String schemename,
        @WebParam(name = "data", targetNamespace = "")
        FillNewsletterData data,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idWebPage
     * @param credentials
     * @param idContent
     * @param block
     * @param position
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "insertContentInWebPage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.InsertContentInWebPage")
    @ResponseWrapper(localName = "insertContentInWebPageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.InsertContentInWebPageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/insertContentInWebPageRequest", output = "http://webservices.magnews/MagNewsAPI/insertContentInWebPageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/insertContentInWebPage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/insertContentInWebPage/Fault/ServiceNotAvailableException")
    })
    public void insertContentInWebPage(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "idWebPage", targetNamespace = "")
        String idWebPage,
        @WebParam(name = "block", targetNamespace = "")
        String block,
        @WebParam(name = "position", targetNamespace = "")
        String position,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param values
     * @param idDatabase
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "mergeContact", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.MergeContact")
    @ResponseWrapper(localName = "mergeContactResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.MergeContactResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/mergeContactRequest", output = "http://webservices.magnews/MagNewsAPI/mergeContactResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/mergeContact/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/mergeContact/Fault/ServiceNotAvailableException")
    })
    public MnContactOperation mergeContact(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<MnContactValue> values,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param mergeOptions
     * @param values
     * @param idNewsletter
     * @param idDatabase
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MergeAndSendOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "mergeContactAndSendOnDemandMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.MergeContactAndSendOnDemandMessage")
    @ResponseWrapper(localName = "mergeContactAndSendOnDemandMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.MergeContactAndSendOnDemandMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/mergeContactAndSendOnDemandMessageRequest", output = "http://webservices.magnews/MagNewsAPI/mergeContactAndSendOnDemandMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/mergeContactAndSendOnDemandMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/mergeContactAndSendOnDemandMessage/Fault/ServiceNotAvailableException")
    })
    public MergeAndSendOperation mergeContactAndSendOnDemandMessage(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<MnContactValue> values,
        @WebParam(name = "mergeOptions", targetNamespace = "")
        List<Option> mergeOptions,
        @WebParam(name = "options", targetNamespace = "")
        OnDemandMessageOptions options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param fieldName
     * @param credentials
     * @param idDatabase
     * @param value
     * @param operator
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContactsByField", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByField")
    @ResponseWrapper(localName = "queryContactsByFieldResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByFieldResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsByFieldRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsByFieldResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByField/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByField/Fault/ServiceNotAvailableException")
    })
    public String queryContactsByField(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "fieldName", targetNamespace = "")
        String fieldName,
        @WebParam(name = "operator", targetNamespace = "")
        String operator,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param filter
     * @param asc
     * @param credentials
     * @param idDatabase
     * @param options
     * @param orderBy
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContactsByFilter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByFilter")
    @ResponseWrapper(localName = "queryContactsByFilterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByFilterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsByFilterRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsByFilterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByFilter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByFilter/Fault/ServiceNotAvailableException")
    })
    public String queryContactsByFilter(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "filter", targetNamespace = "")
        Filter filter,
        @WebParam(name = "orderBy", targetNamespace = "")
        String orderBy,
        @WebParam(name = "asc", targetNamespace = "")
        boolean asc,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idGroup
     * @param credentials
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContactsByGroup", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByGroup")
    @ResponseWrapper(localName = "queryContactsByGroupResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByGroupResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsByGroupRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsByGroupResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByGroup/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByGroup/Fault/ServiceNotAvailableException")
    })
    public String queryContactsByGroup(
        @WebParam(name = "idGroup", targetNamespace = "")
        String idGroup,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param idList
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContactsByList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByList")
    @ResponseWrapper(localName = "queryContactsByListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsByListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsByListRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsByListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsByList/Fault/ServiceNotAvailableException")
    })
    public String queryContactsByList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param idContacts
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContactsReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsReport")
    @ResponseWrapper(localName = "queryContactsReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsReportRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContactsReport/Fault/ServiceNotAvailableException")
    })
    public String queryContactsReport(
        @WebParam(name = "idContacts", targetNamespace = "")
        List<String> idContacts,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryDeliveryStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDeliveryStatus")
    @ResponseWrapper(localName = "queryDeliveryStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDeliveryStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryDeliveryStatusRequest", output = "http://webservices.magnews/MagNewsAPI/queryDeliveryStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDeliveryStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDeliveryStatus/Fault/ServiceNotAvailableException")
    })
    public String queryDeliveryStatus(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryDeliveries", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDeliveries")
    @ResponseWrapper(localName = "queryDeliveriesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDeliveriesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryDeliveriesRequest", output = "http://webservices.magnews/MagNewsAPI/queryDeliveriesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDeliveries/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDeliveries/Fault/ServiceNotAvailableException")
    })
    public String queryDeliveries(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryDetailedContactReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedContactReport")
    @ResponseWrapper(localName = "queryDetailedContactReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedContactReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryDetailedContactReportRequest", output = "http://webservices.magnews/MagNewsAPI/queryDetailedContactReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedContactReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedContactReport/Fault/ServiceNotAvailableException")
    })
    public String queryDetailedContactReport(
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryDetailedContactSMSReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedContactSMSReport")
    @ResponseWrapper(localName = "queryDetailedContactSMSReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedContactSMSReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryDetailedContactSMSReportRequest", output = "http://webservices.magnews/MagNewsAPI/queryDetailedContactSMSReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedContactSMSReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedContactSMSReport/Fault/ServiceNotAvailableException")
    })
    public String queryDetailedContactSMSReport(
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryDetailedNewsletterReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedNewsletterReport")
    @ResponseWrapper(localName = "queryDetailedNewsletterReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryDetailedNewsletterReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryDetailedNewsletterReportRequest", output = "http://webservices.magnews/MagNewsAPI/queryDetailedNewsletterReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedNewsletterReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryDetailedNewsletterReport/Fault/ServiceNotAvailableException")
    })
    public String queryDetailedNewsletterReport(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param showanonymous
     * @param idPage
     * @param from
     * @param to
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryFormSubmissions", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryFormSubmissions")
    @ResponseWrapper(localName = "queryFormSubmissionsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryFormSubmissionsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryFormSubmissionsRequest", output = "http://webservices.magnews/MagNewsAPI/queryFormSubmissionsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryFormSubmissions/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryFormSubmissions/Fault/ServiceNotAvailableException")
    })
    public String queryFormSubmissions(
        @WebParam(name = "idPage", targetNamespace = "")
        String idPage,
        @WebParam(name = "from", targetNamespace = "")
        XMLGregorianCalendar from,
        @WebParam(name = "to", targetNamespace = "")
        XMLGregorianCalendar to,
        @WebParam(name = "showanonymous", targetNamespace = "")
        boolean showanonymous,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @param filterIdEditor
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryNewslettersByCampaign", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryNewslettersByCampaign")
    @ResponseWrapper(localName = "queryNewslettersByCampaignResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryNewslettersByCampaignResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryNewslettersByCampaignRequest", output = "http://webservices.magnews/MagNewsAPI/queryNewslettersByCampaignResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryNewslettersByCampaign/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryNewslettersByCampaign/Fault/ServiceNotAvailableException")
    })
    public String queryNewslettersByCampaign(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "filterIdEditor", targetNamespace = "")
        String filterIdEditor,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @param idContent
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.Content
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "renderContent", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RenderContent")
    @ResponseWrapper(localName = "renderContentResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RenderContentResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/renderContentRequest", output = "http://webservices.magnews/MagNewsAPI/renderContentResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/renderContent/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/renderContent/Fault/ServiceNotAvailableException")
    })
    public Content renderContent(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDeliveryStatus
     * @param action
     * @return
     *     returns it.giunti.apg.soap.magnews.MnDeliveryStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "requestDeliveryStatusAction", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RequestDeliveryStatusAction")
    @ResponseWrapper(localName = "requestDeliveryStatusActionResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RequestDeliveryStatusActionResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/requestDeliveryStatusActionRequest", output = "http://webservices.magnews/MagNewsAPI/requestDeliveryStatusActionResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/requestDeliveryStatusAction/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/requestDeliveryStatusAction/Fault/ServiceNotAvailableException")
    })
    public MnDeliveryStatus requestDeliveryStatusAction(
        @WebParam(name = "idDeliveryStatus", targetNamespace = "")
        String idDeliveryStatus,
        @WebParam(name = "action", targetNamespace = "")
        String action,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param event
     * @return
     *     returns boolean
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "saveContactEvent", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveContactEvent")
    @ResponseWrapper(localName = "saveContactEventResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveContactEventResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/saveContactEventRequest", output = "http://webservices.magnews/MagNewsAPI/saveContactEventResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveContactEvent/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveContactEvent/Fault/ServiceNotAvailableException")
    })
    public boolean saveContactEvent(
        @WebParam(name = "event", targetNamespace = "")
        MnEvent event,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.SimpleMessageEvent>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     * @throws StatsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSimpleMessageEvents", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageEvents")
    @ResponseWrapper(localName = "getSimpleMessageEventsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageEventsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getSimpleMessageEventsRequest", output = "http://webservices.magnews/MagNewsAPI/getSimpleMessageEventsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageEvents/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageEvents/Fault/ServiceNotAvailableException"),
        @FaultAction(className = StatsException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageEvents/Fault/StatsException")
    })
    public List<SimpleMessageEvent> getSimpleMessageEvents(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception, StatsException_Exception
    ;

    /**
     * 
     * @param headers
     * @param credentials
     * @param idNewsletter
     * @param options
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "saveNewsletterCustomHeaders", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveNewsletterCustomHeaders")
    @ResponseWrapper(localName = "saveNewsletterCustomHeadersResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveNewsletterCustomHeadersResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/saveNewsletterCustomHeadersRequest", output = "http://webservices.magnews/MagNewsAPI/saveNewsletterCustomHeadersResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveNewsletterCustomHeaders/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveNewsletterCustomHeaders/Fault/ServiceNotAvailableException")
    })
    public void saveNewsletterCustomHeaders(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "headers", targetNamespace = "")
        List<FieldValue> headers,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param maxrows
     * @param credentials
     * @param criteria
     * @param options
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchContents", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SearchContents")
    @ResponseWrapper(localName = "searchContentsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SearchContentsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/searchContentsRequest", output = "http://webservices.magnews/MagNewsAPI/searchContentsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/searchContents/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/searchContents/Fault/ServiceNotAvailableException")
    })
    public List<String> searchContents(
        @WebParam(name = "criteria", targetNamespace = "")
        List<FieldValue> criteria,
        @WebParam(name = "maxrows", targetNamespace = "")
        int maxrows,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param advancedOptions
     * @param idNewsletter
     * @param options
     * @param target
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendNewsletter")
    @ResponseWrapper(localName = "sendNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/sendNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendNewsletter/Fault/ServiceNotAvailableException")
    })
    public String sendNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "target", targetNamespace = "")
        List<String> target,
        @WebParam(name = "options", targetNamespace = "")
        MnSendOptions options,
        @WebParam(name = "advancedOptions", targetNamespace = "")
        List<Option> advancedOptions,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param address
     * @param credentials
     * @param options
     * @param newsletterID
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendSingleNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSingleNewsletter")
    @ResponseWrapper(localName = "sendSingleNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSingleNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendSingleNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/sendSingleNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSingleNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSingleNewsletter/Fault/ServiceNotAvailableException")
    })
    public String sendSingleNewsletter(
        @WebParam(name = "newsletterID", targetNamespace = "")
        String newsletterID,
        @WebParam(name = "address", targetNamespace = "")
        String address,
        @WebParam(name = "options", targetNamespace = "")
        SingleSendOptions options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param advancedOptions
     * @param idRowSet
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "startBatchContactsUpdate", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.StartBatchContactsUpdate")
    @ResponseWrapper(localName = "startBatchContactsUpdateResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.StartBatchContactsUpdateResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/startBatchContactsUpdateRequest", output = "http://webservices.magnews/MagNewsAPI/startBatchContactsUpdateResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/startBatchContactsUpdate/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/startBatchContactsUpdate/Fault/ServiceNotAvailableException")
    })
    public String startBatchContactsUpdate(
        @WebParam(name = "idRowSet", targetNamespace = "")
        String idRowSet,
        @WebParam(name = "options", targetNamespace = "")
        MnBatchStartOptions options,
        @WebParam(name = "advancedOptions", targetNamespace = "")
        List<Option> advancedOptions,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idSubscriptionCause
     * @param idDatabase
     * @param idList
     * @param primaryKeyValue
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "subscribeContactToList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SubscribeContactToList")
    @ResponseWrapper(localName = "subscribeContactToListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SubscribeContactToListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/subscribeContactToListRequest", output = "http://webservices.magnews/MagNewsAPI/subscribeContactToListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/subscribeContactToList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/subscribeContactToList/Fault/ServiceNotAvailableException")
    })
    public MnContactOperation subscribeContactToList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValue", targetNamespace = "")
        String primaryKeyValue,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "idSubscriptionCause", targetNamespace = "")
        String idSubscriptionCause,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idUnsubscriptionCause
     * @param credentials
     * @param idDatabase
     * @param idList
     * @param primaryKeyValue
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "unsubscribeContactFromList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UnsubscribeContactFromList")
    @ResponseWrapper(localName = "unsubscribeContactFromListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UnsubscribeContactFromListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/unsubscribeContactFromListRequest", output = "http://webservices.magnews/MagNewsAPI/unsubscribeContactFromListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/unsubscribeContactFromList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/unsubscribeContactFromList/Fault/ServiceNotAvailableException")
    })
    public MnContactOperation unsubscribeContactFromList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValue", targetNamespace = "")
        String primaryKeyValue,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "idUnsubscriptionCause", targetNamespace = "")
        String idUnsubscriptionCause,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param idCustomContentType
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateCustomContentType", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateCustomContentType")
    @ResponseWrapper(localName = "updateCustomContentTypeResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateCustomContentTypeResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateCustomContentTypeRequest", output = "http://webservices.magnews/MagNewsAPI/updateCustomContentTypeResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateCustomContentType/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateCustomContentType/Fault/ServiceNotAvailableException")
    })
    public String updateCustomContentType(
        @WebParam(name = "idCustomContentType", targetNamespace = "")
        String idCustomContentType,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param fieldOptions
     * @param idDatabase
     * @param name
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnAlterSchemaResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateField", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateField")
    @ResponseWrapper(localName = "updateFieldResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateFieldResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateFieldRequest", output = "http://webservices.magnews/MagNewsAPI/updateFieldResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateField/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateField/Fault/ServiceNotAvailableException")
    })
    public MnAlterSchemaResult updateField(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "fieldOptions", targetNamespace = "")
        MnFieldOptions fieldOptions,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param options
     * @param idList
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateList", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateList")
    @ResponseWrapper(localName = "updateListResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateListResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateListRequest", output = "http://webservices.magnews/MagNewsAPI/updateListResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateList/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateList/Fault/ServiceNotAvailableException")
    })
    public void updateList(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "idList", targetNamespace = "")
        String idList,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.BounceCategory>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "describeBounceCategories", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DescribeBounceCategories")
    @ResponseWrapper(localName = "describeBounceCategoriesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DescribeBounceCategoriesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/describeBounceCategoriesRequest", output = "http://webservices.magnews/MagNewsAPI/describeBounceCategoriesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/describeBounceCategories/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/describeBounceCategories/Fault/ServiceNotAvailableException")
    })
    public List<BounceCategory> describeBounceCategories(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param options
     * @return
     *     returns int
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeUpdate", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteUpdate")
    @ResponseWrapper(localName = "executeUpdateResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteUpdateResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/executeUpdateRequest", output = "http://webservices.magnews/MagNewsAPI/executeUpdateResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeUpdate/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeUpdate/Fault/ServiceNotAvailableException")
    })
    public int executeUpdate(
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param options
     * @param parameters
     * @return
     *     returns it.giunti.apg.soap.magnews.SqlResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeSql", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteSql")
    @ResponseWrapper(localName = "executeSqlResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteSqlResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/executeSqlRequest", output = "http://webservices.magnews/MagNewsAPI/executeSqlResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeSql/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeSql/Fault/ServiceNotAvailableException")
    })
    public SqlResult executeSql(
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "parameters", targetNamespace = "")
        List<SqlParameter> parameters,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.SimpleQueryResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeSimpleQuery", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteSimpleQuery")
    @ResponseWrapper(localName = "executeSimpleQueryResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ExecuteSimpleQueryResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/executeSimpleQueryRequest", output = "http://webservices.magnews/MagNewsAPI/executeSimpleQueryResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeSimpleQuery/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/executeSimpleQuery/Fault/ServiceNotAvailableException")
    })
    public SimpleQueryResult executeSimpleQuery(
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param fromDate
     * @param credentials
     * @param toDate
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnPlannedDelivery>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllPlannedDeliveries", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllPlannedDeliveries")
    @ResponseWrapper(localName = "getAllPlannedDeliveriesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllPlannedDeliveriesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllPlannedDeliveriesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllPlannedDeliveriesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllPlannedDeliveries/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllPlannedDeliveries/Fault/ServiceNotAvailableException")
    })
    public List<MnPlannedDelivery> getAllPlannedDeliveries(
        @WebParam(name = "fromDate", targetNamespace = "")
        XMLGregorianCalendar fromDate,
        @WebParam(name = "toDate", targetNamespace = "")
        XMLGregorianCalendar toDate,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDeliveryPolicy>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllDeliveryPolicies", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDeliveryPolicies")
    @ResponseWrapper(localName = "getAllDeliveryPoliciesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDeliveryPoliciesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllDeliveryPoliciesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllDeliveryPoliciesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDeliveryPolicies/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDeliveryPolicies/Fault/ServiceNotAvailableException")
    })
    public List<MnDeliveryPolicy> getAllDeliveryPolicies(
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageType
     * @param from
     * @param to
     * @param option
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageTypeReport
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSimpleMessageTypeReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageTypeReport")
    @ResponseWrapper(localName = "getSimpleMessageTypeReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetSimpleMessageTypeReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getSimpleMessageTypeReportRequest", output = "http://webservices.magnews/MagNewsAPI/getSimpleMessageTypeReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageTypeReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getSimpleMessageTypeReport/Fault/ServiceNotAvailableException")
    })
    public MnSimpleMessageTypeReport getSimpleMessageTypeReport(
        @WebParam(name = "idMessageType", targetNamespace = "")
        String idMessageType,
        @WebParam(name = "from", targetNamespace = "")
        XMLGregorianCalendar from,
        @WebParam(name = "to", targetNamespace = "")
        XMLGregorianCalendar to,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param contact
     * @param key
     * @param option
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.EnterWorkflowResult>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "enterWorkflow", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.EnterWorkflow")
    @ResponseWrapper(localName = "enterWorkflowResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.EnterWorkflowResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/enterWorkflowRequest", output = "http://webservices.magnews/MagNewsAPI/enterWorkflowResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/enterWorkflow/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/enterWorkflow/Fault/ServiceNotAvailableException")
    })
    public List<EnterWorkflowResult> enterWorkflow(
        @WebParam(name = "contact", targetNamespace = "")
        List<EnterWorkflowData> contact,
        @WebParam(name = "key", targetNamespace = "")
        String key,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idReport
     * @param credentials
     * @param fileId
     * @param option
     * @return
     *     returns byte[]
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadReportAttachment", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadReportAttachment")
    @ResponseWrapper(localName = "downloadReportAttachmentResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DownloadReportAttachmentResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/downloadReportAttachmentRequest", output = "http://webservices.magnews/MagNewsAPI/downloadReportAttachmentResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadReportAttachment/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/downloadReportAttachment/Fault/ServiceNotAvailableException")
    })
    public byte[] downloadReportAttachment(
        @WebParam(name = "idReport", targetNamespace = "")
        String idReport,
        @WebParam(name = "fileId", targetNamespace = "")
        String fileId,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param values
     * @param idDatabase
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContactOperation>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchMergeContacts", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchMergeContacts")
    @ResponseWrapper(localName = "batchMergeContactsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.BatchMergeContactsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/batchMergeContactsRequest", output = "http://webservices.magnews/MagNewsAPI/batchMergeContactsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchMergeContacts/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/batchMergeContacts/Fault/ServiceNotAvailableException")
    })
    public List<MnContactOperation> batchMergeContacts(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<BatchMergeValues> values,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param idDatabase
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContacts", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContacts")
    @ResponseWrapper(localName = "queryContactsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContactsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContactsRequest", output = "http://webservices.magnews/MagNewsAPI/queryContactsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContacts/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContacts/Fault/ServiceNotAvailableException")
    })
    public String queryContacts(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @param primaryKeyValue
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContact
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findContactByPrimaryKey", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactByPrimaryKey")
    @ResponseWrapper(localName = "findContactByPrimaryKeyResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactByPrimaryKeyResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findContactByPrimaryKeyRequest", output = "http://webservices.magnews/MagNewsAPI/findContactByPrimaryKeyResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactByPrimaryKey/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactByPrimaryKey/Fault/ServiceNotAvailableException")
    })
    public MnContact findContactByPrimaryKey(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "primaryKeyValue", targetNamespace = "")
        String primaryKeyValue,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idContact
     * @param credentials
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContact
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findContactById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactById")
    @ResponseWrapper(localName = "findContactByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findContactByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findContactByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactById/Fault/ServiceNotAvailableException")
    })
    public MnContact findContactById(
        @WebParam(name = "idContact", targetNamespace = "")
        String idContact,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param password
     * @param credentials
     * @param idDatabase
     * @param options
     * @param username
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContact
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loginContact", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.LoginContact")
    @ResponseWrapper(localName = "loginContactResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.LoginContactResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/loginContactRequest", output = "http://webservices.magnews/MagNewsAPI/loginContactResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/loginContact/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/loginContact/Fault/ServiceNotAvailableException")
    })
    public MnContact loginContact(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param fieldName
     * @param credentials
     * @param idDatabase
     * @param value
     * @param operator
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnContact>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findContactsByField", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactsByField")
    @ResponseWrapper(localName = "findContactsByFieldResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindContactsByFieldResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findContactsByFieldRequest", output = "http://webservices.magnews/MagNewsAPI/findContactsByFieldResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactsByField/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findContactsByField/Fault/ServiceNotAvailableException")
    })
    public List<MnContact> findContactsByField(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "fieldName", targetNamespace = "")
        String fieldName,
        @WebParam(name = "operator", targetNamespace = "")
        String operator,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param idDatabase
     * @param options
     * @return
     *     returns int
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "countContacts", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CountContacts")
    @ResponseWrapper(localName = "countContactsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CountContactsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/countContactsRequest", output = "http://webservices.magnews/MagNewsAPI/countContactsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/countContacts/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/countContacts/Fault/ServiceNotAvailableException")
    })
    public int countContacts(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryNewsletters", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryNewsletters")
    @ResponseWrapper(localName = "queryNewslettersResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryNewslettersResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryNewslettersRequest", output = "http://webservices.magnews/MagNewsAPI/queryNewslettersResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryNewsletters/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryNewsletters/Fault/ServiceNotAvailableException")
    })
    public String queryNewsletters(
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param values
     * @param idDatabase
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "subscribeContact", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SubscribeContact")
    @ResponseWrapper(localName = "subscribeContactResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SubscribeContactResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/subscribeContactRequest", output = "http://webservices.magnews/MagNewsAPI/subscribeContactResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/subscribeContact/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/subscribeContact/Fault/ServiceNotAvailableException")
    })
    public MnContactOperation subscribeContact(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<MnContactValue> values,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param values
     * @param idDatabase
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContactOperation
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "unsubscribeContact", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UnsubscribeContact")
    @ResponseWrapper(localName = "unsubscribeContactResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UnsubscribeContactResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/unsubscribeContactRequest", output = "http://webservices.magnews/MagNewsAPI/unsubscribeContactResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/unsubscribeContact/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/unsubscribeContact/Fault/ServiceNotAvailableException")
    })
    public MnContactOperation unsubscribeContact(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "values", targetNamespace = "")
        List<MnContactValue> values,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDatabaseInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllDatabases", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDatabases")
    @ResponseWrapper(localName = "getAllDatabasesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDatabasesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllDatabasesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllDatabasesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDatabases/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDatabases/Fault/ServiceNotAvailableException")
    })
    public List<MnDatabaseInfo> getAllDatabases(
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idDatabase
     * @return
     *     returns it.giunti.apg.soap.magnews.MnDatabaseInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findDatabaseById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindDatabaseById")
    @ResponseWrapper(localName = "findDatabaseByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindDatabaseByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findDatabaseByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findDatabaseByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findDatabaseById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findDatabaseById/Fault/ServiceNotAvailableException")
    })
    public MnDatabaseInfo findDatabaseById(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idParentGroup
     * @param groupName
     * @param fieldName
     * @param credentials
     * @param idDatabase
     * @param value
     * @param operator
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleGroup", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleGroup")
    @ResponseWrapper(localName = "createSimpleGroupResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleGroupResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleGroupRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleGroupResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleGroup/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleGroup/Fault/ServiceNotAvailableException")
    })
    public String createSimpleGroup(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "fieldName", targetNamespace = "")
        String fieldName,
        @WebParam(name = "operator", targetNamespace = "")
        String operator,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "idParentGroup", targetNamespace = "")
        String idParentGroup,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageCategory
     * @param option
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSimpleMessageType>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSimpleMessageTypes", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSimpleMessageTypes")
    @ResponseWrapper(localName = "getAllSimpleMessageTypesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSimpleMessageTypesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageTypesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageTypesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageTypes/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageTypes/Fault/ServiceNotAvailableException")
    })
    public List<MnSimpleMessageType> getAllSimpleMessageTypes(
        @WebParam(name = "idMessageCategory", targetNamespace = "")
        String idMessageCategory,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageType
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageType
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSimpleMessageTypeById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSimpleMessageTypeById")
    @ResponseWrapper(localName = "findSimpleMessageTypeByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSimpleMessageTypeByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findSimpleMessageTypeByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findSimpleMessageTypeByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSimpleMessageTypeById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSimpleMessageTypeById/Fault/ServiceNotAvailableException")
    })
    public MnSimpleMessageType findSimpleMessageTypeById(
        @WebParam(name = "idMessageType", targetNamespace = "")
        String idMessageType,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param option
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnSimpleMessageCategory>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSimpleMessageCategories", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSimpleMessageCategories")
    @ResponseWrapper(localName = "getAllSimpleMessageCategoriesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllSimpleMessageCategoriesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageCategoriesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageCategoriesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageCategories/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllSimpleMessageCategories/Fault/ServiceNotAvailableException")
    })
    public List<MnSimpleMessageCategory> getAllSimpleMessageCategories(
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageCategory
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSimpleMessageCategory
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSimpleMessageCategoryById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSimpleMessageCategoryById")
    @ResponseWrapper(localName = "findSimpleMessageCategoryByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSimpleMessageCategoryByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findSimpleMessageCategoryByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findSimpleMessageCategoryByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSimpleMessageCategoryById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSimpleMessageCategoryById/Fault/ServiceNotAvailableException")
    })
    public MnSimpleMessageCategory findSimpleMessageCategoryById(
        @WebParam(name = "idMessageCategory", targetNamespace = "")
        String idMessageCategory,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param name
     * @param idMessageCategory
     * @param option
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleMessageType", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleMessageType")
    @ResponseWrapper(localName = "createSimpleMessageTypeResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleMessageTypeResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleMessageTypeRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleMessageTypeResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleMessageType/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleMessageType/Fault/ServiceNotAvailableException")
    })
    public String createSimpleMessageType(
        @WebParam(name = "idMessageCategory", targetNamespace = "")
        String idMessageCategory,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageType
     * @param option
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateSimpleMessageType", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateSimpleMessageType")
    @ResponseWrapper(localName = "updateSimpleMessageTypeResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateSimpleMessageTypeResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageTypeRequest", output = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageTypeResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageType/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageType/Fault/ServiceNotAvailableException")
    })
    public void updateSimpleMessageType(
        @WebParam(name = "idMessageType", targetNamespace = "")
        String idMessageType,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param name
     * @param option
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimpleMessageCategory", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleMessageCategory")
    @ResponseWrapper(localName = "createSimpleMessageCategoryResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateSimpleMessageCategoryResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createSimpleMessageCategoryRequest", output = "http://webservices.magnews/MagNewsAPI/createSimpleMessageCategoryResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleMessageCategory/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createSimpleMessageCategory/Fault/ServiceNotAvailableException")
    })
    public String createSimpleMessageCategory(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idMessageCategory
     * @param option
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateSimpleMessageCategory", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateSimpleMessageCategory")
    @ResponseWrapper(localName = "updateSimpleMessageCategoryResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateSimpleMessageCategoryResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageCategoryRequest", output = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageCategoryResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageCategory/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateSimpleMessageCategory/Fault/ServiceNotAvailableException")
    })
    public void updateSimpleMessageCategory(
        @WebParam(name = "idMessageCategory", targetNamespace = "")
        String idMessageCategory,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idGroup
     * @param credentials
     * @return
     *     returns it.giunti.apg.soap.magnews.MnGroupInfo
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findGroupById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindGroupById")
    @ResponseWrapper(localName = "findGroupByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindGroupByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findGroupByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findGroupByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findGroupById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findGroupById/Fault/ServiceNotAvailableException")
    })
    public MnGroupInfo findGroupById(
        @WebParam(name = "idGroup", targetNamespace = "")
        String idGroup,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param idDatabase
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnGroupInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryGroups", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryGroups")
    @ResponseWrapper(localName = "queryGroupsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryGroupsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryGroupsRequest", output = "http://webservices.magnews/MagNewsAPI/queryGroupsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryGroups/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryGroups/Fault/ServiceNotAvailableException")
    })
    public List<MnGroupInfo> queryGroups(
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idGroup
     * @param credentials
     * @param options
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteGroup", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteGroup")
    @ResponseWrapper(localName = "deleteGroupResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteGroupResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/deleteGroupRequest", output = "http://webservices.magnews/MagNewsAPI/deleteGroupResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteGroup/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteGroup/Fault/ServiceNotAvailableException")
    })
    public void deleteGroup(
        @WebParam(name = "idGroup", targetNamespace = "")
        String idGroup,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param address
     * @param credentials
     * @param idDatabase
     * @param contactPrimaryKey
     * @param messageTemplate
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendSimpleMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSimpleMessage")
    @ResponseWrapper(localName = "sendSimpleMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendSimpleMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendSimpleMessageRequest", output = "http://webservices.magnews/MagNewsAPI/sendSimpleMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSimpleMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendSimpleMessage/Fault/ServiceNotAvailableException")
    })
    public String sendSimpleMessage(
        @WebParam(name = "address", targetNamespace = "")
        String address,
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "contactPrimaryKey", targetNamespace = "")
        String contactPrimaryKey,
        @WebParam(name = "messageTemplate", targetNamespace = "")
        MessageTemplate messageTemplate,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param idDatabase
     * @param options
     * @param contactPrimaryKey
     * @return
     *     returns it.giunti.apg.soap.magnews.OnDemandMessage
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendOnDemandMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendOnDemandMessage")
    @ResponseWrapper(localName = "sendOnDemandMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SendOnDemandMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/sendOnDemandMessageRequest", output = "http://webservices.magnews/MagNewsAPI/sendOnDemandMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendOnDemandMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/sendOnDemandMessage/Fault/ServiceNotAvailableException")
    })
    public OnDemandMessage sendOnDemandMessage(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "idDatabase", targetNamespace = "")
        String idDatabase,
        @WebParam(name = "contactPrimaryKey", targetNamespace = "")
        String contactPrimaryKey,
        @WebParam(name = "options", targetNamespace = "")
        OnDemandMessageOptions options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @return
     *     returns it.giunti.apg.soap.magnews.MnCampaign
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findCampaignById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindCampaignById")
    @ResponseWrapper(localName = "findCampaignByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindCampaignByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findCampaignByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findCampaignByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findCampaignById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findCampaignById/Fault/ServiceNotAvailableException")
    })
    public MnCampaign findCampaignById(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnCampaign>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCampaigns", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllCampaigns")
    @ResponseWrapper(localName = "getAllCampaignsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllCampaignsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllCampaignsRequest", output = "http://webservices.magnews/MagNewsAPI/getAllCampaignsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllCampaigns/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllCampaigns/Fault/ServiceNotAvailableException")
    })
    public List<MnCampaign> getAllCampaigns(
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param field
     * @param credentials
     * @param name
     * @param options
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCampaign", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCampaign")
    @ResponseWrapper(localName = "createCampaignResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateCampaignResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createCampaignRequest", output = "http://webservices.magnews/MagNewsAPI/createCampaignResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCampaign/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createCampaign/Fault/ServiceNotAvailableException")
    })
    public String createCampaign(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "field", targetNamespace = "")
        List<FieldValue> field,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param field
     * @param idCampaign
     * @param credentials
     * @param options
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCampaign", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateCampaign")
    @ResponseWrapper(localName = "updateCampaignResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateCampaignResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateCampaignRequest", output = "http://webservices.magnews/MagNewsAPI/updateCampaignResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateCampaign/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateCampaign/Fault/ServiceNotAvailableException")
    })
    public void updateCampaign(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "field", targetNamespace = "")
        List<FieldValue> field,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @return
     *     returns it.giunti.apg.soap.magnews.MnNewsletter
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findNewsletterById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindNewsletterById")
    @ResponseWrapper(localName = "findNewsletterByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindNewsletterByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findNewsletterByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findNewsletterByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findNewsletterById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findNewsletterById/Fault/ServiceNotAvailableException")
    })
    public MnNewsletter findNewsletterById(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @param options
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnTemplateInfo>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllNewsletterTemplates", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllNewsletterTemplates")
    @ResponseWrapper(localName = "getAllNewsletterTemplatesResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllNewsletterTemplatesResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllNewsletterTemplatesRequest", output = "http://webservices.magnews/MagNewsAPI/getAllNewsletterTemplatesResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllNewsletterTemplates/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllNewsletterTemplates/Fault/ServiceNotAvailableException")
    })
    public List<MnTemplateInfo> getAllNewsletterTemplates(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idSurvey
     * @param showuncompleted
     * @param showanonymous
     * @param from
     * @param to
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "querySurveySessions", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QuerySurveySessions")
    @ResponseWrapper(localName = "querySurveySessionsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QuerySurveySessionsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/querySurveySessionsRequest", output = "http://webservices.magnews/MagNewsAPI/querySurveySessionsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/querySurveySessions/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/querySurveySessions/Fault/ServiceNotAvailableException")
    })
    public String querySurveySessions(
        @WebParam(name = "idSurvey", targetNamespace = "")
        String idSurvey,
        @WebParam(name = "from", targetNamespace = "")
        XMLGregorianCalendar from,
        @WebParam(name = "to", targetNamespace = "")
        XMLGregorianCalendar to,
        @WebParam(name = "showanonymous", targetNamespace = "")
        boolean showanonymous,
        @WebParam(name = "showuncompleted", targetNamespace = "")
        boolean showuncompleted,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param query
     * @param options
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "queryContents", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContents")
    @ResponseWrapper(localName = "queryContentsResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.QueryContentsResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/queryContentsRequest", output = "http://webservices.magnews/MagNewsAPI/queryContentsResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContents/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/queryContents/Fault/ServiceNotAvailableException")
    })
    public List<String> queryContents(
        @WebParam(name = "query", targetNamespace = "")
        String query,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param values
     * @param name
     * @param options
     * @param type
     * @return
     *     returns it.giunti.apg.soap.magnews.MnContentTag
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContentTag", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContentTag")
    @ResponseWrapper(localName = "createContentTagResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContentTagResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createContentTagRequest", output = "http://webservices.magnews/MagNewsAPI/createContentTagResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContentTag/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContentTag/Fault/ServiceNotAvailableException")
    })
    public MnContentTag createContentTag(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "values", targetNamespace = "")
        List<String> values,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idPage
     * @return
     *     returns it.giunti.apg.soap.magnews.MnPage
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findWebPageById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindWebPageById")
    @ResponseWrapper(localName = "findWebPageByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindWebPageByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findWebPageByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findWebPageByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findWebPageById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findWebPageById/Fault/ServiceNotAvailableException")
    })
    public MnPage findWebPageById(
        @WebParam(name = "idPage", targetNamespace = "")
        String idPage,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param idWebsite
     * @param content
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createWebPage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateWebPage")
    @ResponseWrapper(localName = "createWebPageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateWebPageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createWebPageRequest", output = "http://webservices.magnews/MagNewsAPI/createWebPageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createWebPage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createWebPage/Fault/ServiceNotAvailableException")
    })
    public String createWebPage(
        @WebParam(name = "idWebsite", targetNamespace = "")
        String idWebsite,
        @WebParam(name = "content", targetNamespace = "")
        Content content,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idSurvey
     * @return
     *     returns it.giunti.apg.soap.magnews.MnSurvey
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSurveyById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSurveyById")
    @ResponseWrapper(localName = "findSurveyByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindSurveyByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findSurveyByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findSurveyByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSurveyById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findSurveyById/Fault/ServiceNotAvailableException")
    })
    public MnSurvey findSurveyById(
        @WebParam(name = "idSurvey", targetNamespace = "")
        String idSurvey,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @param options
     * @param content
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateNewsletter")
    @ResponseWrapper(localName = "createNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/createNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createNewsletter/Fault/ServiceNotAvailableException")
    })
    public String createNewsletter(
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "content", targetNamespace = "")
        Content content,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idCampaign
     * @param credentials
     * @param name
     * @param options
     * @param idTemplate
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewsletterFromTemplate", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateNewsletterFromTemplate")
    @ResponseWrapper(localName = "createNewsletterFromTemplateResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateNewsletterFromTemplateResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createNewsletterFromTemplateRequest", output = "http://webservices.magnews/MagNewsAPI/createNewsletterFromTemplateResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createNewsletterFromTemplate/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createNewsletterFromTemplate/Fault/ServiceNotAvailableException")
    })
    public String createNewsletterFromTemplate(
        @WebParam(name = "idTemplate", targetNamespace = "")
        String idTemplate,
        @WebParam(name = "idCampaign", targetNamespace = "")
        String idCampaign,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteNewsletter")
    @ResponseWrapper(localName = "deleteNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/deleteNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/deleteNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteNewsletter/Fault/ServiceNotAvailableException")
    })
    public void deleteNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param options
     * @param content
     * @return
     *     returns java.lang.String
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContent", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContent")
    @ResponseWrapper(localName = "createContentResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContentResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createContentRequest", output = "http://webservices.magnews/MagNewsAPI/createContentResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContent/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContent/Fault/ServiceNotAvailableException")
    })
    public String createContent(
        @WebParam(name = "content", targetNamespace = "")
        Content content,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idContent
     * @param options
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteContent", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteContent")
    @ResponseWrapper(localName = "deleteContentResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.DeleteContentResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/deleteContentRequest", output = "http://webservices.magnews/MagNewsAPI/deleteContentResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteContent/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/deleteContent/Fault/ServiceNotAvailableException")
    })
    public void deleteContent(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idContent
     * @param idNewsletter
     * @param format
     * @param block
     * @param position
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "insertContentInNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.InsertContentInNewsletter")
    @ResponseWrapper(localName = "insertContentInNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.InsertContentInNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/insertContentInNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/insertContentInNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/insertContentInNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/insertContentInNewsletter/Fault/ServiceNotAvailableException")
    })
    public void insertContentInNewsletter(
        @WebParam(name = "idContent", targetNamespace = "")
        String idContent,
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "block", targetNamespace = "")
        String block,
        @WebParam(name = "position", targetNamespace = "")
        String position,
        @WebParam(name = "format", targetNamespace = "")
        String format,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param path
     * @param credentials
     * @param values
     * @param idNewsletter
     * @param position
     * @param contenttype
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createContainerInNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContainerInNewsletter")
    @ResponseWrapper(localName = "createContainerInNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.CreateContainerInNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/createContainerInNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/createContainerInNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContainerInNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/createContainerInNewsletter/Fault/ServiceNotAvailableException")
    })
    public void createContainerInNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "path", targetNamespace = "")
        String path,
        @WebParam(name = "position", targetNamespace = "")
        String position,
        @WebParam(name = "contenttype", targetNamespace = "")
        String contenttype,
        @WebParam(name = "values", targetNamespace = "")
        List<FieldValue> values,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param path
     * @param credentials
     * @param values
     * @param idNewsletter
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateContainerValuesInNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateContainerValuesInNewsletter")
    @ResponseWrapper(localName = "updateContainerValuesInNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.UpdateContainerValuesInNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/updateContainerValuesInNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/updateContainerValuesInNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateContainerValuesInNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/updateContainerValuesInNewsletter/Fault/ServiceNotAvailableException")
    })
    public void updateContainerValuesInNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "path", targetNamespace = "")
        String path,
        @WebParam(name = "values", targetNamespace = "")
        List<FieldValue> values,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param path
     * @param credentials
     * @param idNewsletter
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "clearContainerContentsInNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ClearContainerContentsInNewsletter")
    @ResponseWrapper(localName = "clearContainerContentsInNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.ClearContainerContentsInNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/clearContainerContentsInNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/clearContainerContentsInNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/clearContainerContentsInNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/clearContainerContentsInNewsletter/Fault/ServiceNotAvailableException")
    })
    public void clearContainerContentsInNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "path", targetNamespace = "")
        String path,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param idNewsletter
     * @param format
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContentsInNewsletter", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetContentsInNewsletter")
    @ResponseWrapper(localName = "getContentsInNewsletterResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetContentsInNewsletterResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getContentsInNewsletterRequest", output = "http://webservices.magnews/MagNewsAPI/getContentsInNewsletterResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getContentsInNewsletter/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getContentsInNewsletter/Fault/ServiceNotAvailableException")
    })
    public List<String> getContentsInNewsletter(
        @WebParam(name = "idNewsletter", targetNamespace = "")
        String idNewsletter,
        @WebParam(name = "format", targetNamespace = "")
        String format,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idPlannedDelivery
     * @param credentials
     * @param options
     * @return
     *     returns it.giunti.apg.soap.magnews.MnPlannedDelivery
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findPlannedDeliveryById", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindPlannedDeliveryById")
    @ResponseWrapper(localName = "findPlannedDeliveryByIdResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.FindPlannedDeliveryByIdResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/findPlannedDeliveryByIdRequest", output = "http://webservices.magnews/MagNewsAPI/findPlannedDeliveryByIdResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findPlannedDeliveryById/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/findPlannedDeliveryById/Fault/ServiceNotAvailableException")
    })
    public MnPlannedDelivery findPlannedDeliveryById(
        @WebParam(name = "idPlannedDelivery", targetNamespace = "")
        String idPlannedDelivery,
        @WebParam(name = "options", targetNamespace = "")
        List<Option> options,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param msg
     * @param credentials
     * @return
     *     returns it.giunti.apg.soap.magnews.MnReceivedMessageResult
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "saveReceivedMessage", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveReceivedMessage")
    @ResponseWrapper(localName = "saveReceivedMessageResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.SaveReceivedMessageResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/saveReceivedMessageRequest", output = "http://webservices.magnews/MagNewsAPI/saveReceivedMessageResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveReceivedMessage/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/saveReceivedMessage/Fault/ServiceNotAvailableException")
    })
    public MnReceivedMessageResult saveReceivedMessage(
        @WebParam(name = "msg", targetNamespace = "")
        MnReceivedMessage msg,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param reportType
     * @param credentials
     * @param option
     * @return
     *     returns it.giunti.apg.soap.magnews.ReportStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "requestReport", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RequestReport")
    @ResponseWrapper(localName = "requestReportResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.RequestReportResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/requestReportRequest", output = "http://webservices.magnews/MagNewsAPI/requestReportResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/requestReport/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/requestReport/Fault/ServiceNotAvailableException")
    })
    public ReportStatus requestReport(
        @WebParam(name = "reportType", targetNamespace = "")
        String reportType,
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param idReport
     * @param credentials
     * @return
     *     returns it.giunti.apg.soap.magnews.ReportStatus
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getReportStatus", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetReportStatus")
    @ResponseWrapper(localName = "getReportStatusResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetReportStatusResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getReportStatusRequest", output = "http://webservices.magnews/MagNewsAPI/getReportStatusResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getReportStatus/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getReportStatus/Fault/ServiceNotAvailableException")
    })
    public ReportStatus getReportStatus(
        @WebParam(name = "idReport", targetNamespace = "")
        String idReport,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param credentials
     * @param option
     * @return
     *     returns java.util.List<it.giunti.apg.soap.magnews.MnDeliverabilityCluster>
     * @throws ServiceNotAvailableException_Exception
     * @throws AuthenticationFailedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllDeliverabilityClusters", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDeliverabilityClusters")
    @ResponseWrapper(localName = "getAllDeliverabilityClustersResponse", targetNamespace = "http://webservices.magnews/", className = "it.giunti.apg.soap.magnews.GetAllDeliverabilityClustersResponse")
    @Action(input = "http://webservices.magnews/MagNewsAPI/getAllDeliverabilityClustersRequest", output = "http://webservices.magnews/MagNewsAPI/getAllDeliverabilityClustersResponse", fault = {
        @FaultAction(className = AuthenticationFailedException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDeliverabilityClusters/Fault/AuthenticationFailedException"),
        @FaultAction(className = ServiceNotAvailableException_Exception.class, value = "http://webservices.magnews/MagNewsAPI/getAllDeliverabilityClusters/Fault/ServiceNotAvailableException")
    })
    public List<MnDeliverabilityCluster> getAllDeliverabilityClusters(
        @WebParam(name = "option", targetNamespace = "")
        List<Option> option,
        @WebParam(name = "credentials", targetNamespace = "")
        Credentials credentials)
        throws AuthenticationFailedException_Exception, ServiceNotAvailableException_Exception
    ;

}
