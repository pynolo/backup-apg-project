package it.giunti.apg.core.servlet;

import it.giunti.apg.core.VisualLogger;
import it.giunti.apg.core.ServerConstants;
import it.giunti.apg.core.business.AvvisiBusiness;
import it.giunti.apg.core.business.FileFormatArretrati;
import it.giunti.apg.core.business.FtpUtil;
import it.giunti.apg.core.business.OutputEvasioniBusiness;
import it.giunti.apg.core.business.OutputComunicazioniBusiness;
import it.giunti.apg.shared.AppConstants;
import it.giunti.apg.shared.BusinessException;
import it.giunti.apg.shared.EmptyResultException;
import it.giunti.apg.shared.FileException;
import it.giunti.apg.shared.ValueUtil;
import it.giunti.apg.shared.model.EvasioniFascicoli;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;

public class OutputArretratiServlet extends HttpServlet {
	private static final long serialVersionUID = -7219073607046703475L;
	
	private static final Logger LOG = LoggerFactory.getLogger(OutputArretratiServlet.class);
	private static final String TRUE = "true";
	
	public OutputArretratiServlet() {
		super();
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		Integer idRapporto = ValueUtil.stoi(req.getParameter(AppConstants.PARAM_ID_RAPPORTO));
		String idUtente = req.getParameter(AppConstants.PARAM_ID_UTENTE); 
		Integer idPeriodicoParam = ValueUtil.stoi(req.getParameter(AppConstants.PARAM_ID_PERIODICO));
		String scriviDbParam = req.getParameter(AppConstants.PARAM_SCRIVI_DB);
		Logger.get().addHtmlLogLine(idRapporto, "Estrazione arretrati e destinatari in corso");
		boolean scriviDb = false;
		if (scriviDbParam != null) {
			if (scriviDbParam.equals(TRUE)) {
				scriviDb=true;
			}
		}
		if ((idUtente != null) && (idPeriodicoParam != null) && (idRapporto != null)) {
			if (idUtente.length()>0) {
				prepareResponse(resp, idPeriodicoParam, idRapporto, idUtente, scriviDb);
			}
		}
		try {
			Logger.get().closeAndSaveRapporto(idRapporto);
		} catch (DatabaseException e) {
			throw new ServletException(e);
		}
	}
	
	private void prepareResponse(HttpServletResponse resp, 
			Integer idPeriodico, int idRapporto, String idUtente, boolean writeToDb) {
		int BUFSIZE = 2048;
		try {
			Logger.get().addHtmlLogLine(idRapporto, "Creazione file");
			File f = File.createTempFile("exportArretrati"+idPeriodico, ".txt");
			f.deleteOnExit();
			String timestamp = ServerConstants.FORMAT_FILE_NAME_TIMESTAMP.format(new Date());
			String nomePeriodico = OutputComunicazioniBusiness.findNomePeriodico(idPeriodico);
			String fileName = timestamp+" Arretrati "+nomePeriodico+".txt";
			// Extract invii
			List<EvasioniFascicoli> efList = OutputArretratiBusiness.extractArretratiDaSpedire(idPeriodico, idRapporto);
			// Titolo log
			String avviso = "Estrazione arretrati per '"+efList.get(0).getFascicolo().getPeriodico().getNome()+"'";
			Logger.get().setLogTitle(idRapporto, avviso);
			// Formattazione dati
			Logger.get().addHtmlLogLine(idRapporto, "Formattazione dati");
			FileFormatArretrati.formatArretratiDaSpedire(f, efList, idRapporto);
			
			try {
				// Stream to the requester
				int length = 0;
				ServletOutputStream op = resp.getOutputStream();
				resp.setContentType("application/octet-stream");
				resp.setHeader( "Content-Disposition",
						"attachment; filename=\"" + fileName +"\"" );
				byte[] bbuf = new byte[BUFSIZE];
				DataInputStream in = new DataInputStream(new FileInputStream(f));
				Logger.get().addHtmlLogLine(idRapporto, "Invio file via http");
				while ((in != null) && ((length = in.read(bbuf)) != -1)) {
				    op.write(bbuf,0,length);
				}
				in.close();
				op.flush();
				op.close();
				resp.setContentLength( (int)f.length() );
			} catch (Exception e) { 
				LOG.error(e.getMessage(), e);
				Logger.get().addHtmlLogLine(idRapporto, "Http file transfer error: "+e.getMessage());
			}

			//send file via Ftp and write on db
			if (efList.size() > 0) {
				if (writeToDb) {
					Logger.get().addHtmlLogLine(idRapporto, "FTP del file");
					String ftpHost = new FtpBusiness().completeFileTransfer(f, fileName);
					Logger.get().addHtmlLogLine(idRapporto, "File trasferito su "+ftpHost);
					Date dataStampa = new Date();
					OutputArretratiBusiness.writeEvasioniFascicoliOnDb(efList, dataStampa, idRapporto, idUtente);
					AvvisiBusiness.writeAvviso(avviso, false, idUtente);
				}
			}
		} catch (EmptyResultException e) { 
			LOG.info(e.getMessage(), e);
			Logger.get().addHtmlLogLine(idRapporto, "Nessun dato da estrarre - "+e.getMessage());
		} catch (IOException e) {
			LOG.error(e.getMessage(), e);
			Logger.get().addHtmlLogLine(idRapporto, "IO ERROR: "+e.getMessage());
		} catch (DatabaseException e) { 
			LOG.error(e.getMessage(), e);
			Logger.get().addHtmlLogLine(idRapporto, "DB ERROR: "+e.getMessage());
		} catch (FileException e) { 
			LOG.error(e.getMessage(), e);
			Logger.get().addHtmlLogLine(idRapporto, "FILESYSTEM ERROR: "+e.getMessage());
		}

	}
}